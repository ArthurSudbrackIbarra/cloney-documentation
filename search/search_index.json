{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Official Cloney Documentation","text":"<p>Have you ever found yourself in the situation where you discover a fantastic template Git repository on GitHub, only to realize that it doesn't quite fit your unique project requirements? You're not alone. Traditional Git templates often leave you with the burden of customizing every detail manually, which can be time-consuming and error-prone. This is where Cloney comes to the rescue.</p> <p> </p>"},{"location":"#the-pain-of-manual-adjustments","title":"The Pain of Manual Adjustments","text":"<p>Picture this: you stumble upon a promising template Git repository that could kickstart your project. Excited, you fork the repository, but soon, you realize it needs extensive adjustments. You have to replace placeholder values, tweak configurations, and adapt the code to match your project's specifications.</p> <p>This process can be both frustrating and error-prone. Manually searching and replacing values throughout the codebase can lead to mistakes and inconsistencies. What if you could automate this entire customization process and have a template repository that adapts itself to your needs effortlessly? That's precisely what Cloney, a free and open-source tool developed in Go, is designed to do.</p>"},{"location":"#introducing-cloney-template-repositories","title":"Introducing Cloney Template Repositories","text":"<p>Cloney Template Repositories are the heart of Cloney's innovative approach. These repositories are enriched with a special <code>.cloney.yaml</code> metadata file that contains information about the template repository. This metadata file defines variables and configurations, making the template adaptable to various use cases.</p> <p>With Cloney, you no longer need to manually tweak code, search for placeholders, or worry about consistency. Instead, you can:</p> <ul> <li> <p>Define variables within the <code>.cloney.yaml</code> file, allowing you to customize different aspects of the template, such as project names, descriptions, and more.</p> </li> <li> <p>Use Go templates, a powerful and flexible templating language, to dynamically generate files and directories based on your provided variables.</p> </li> <li> <p>Focus on your project's unique requirements and let Cloney handle the repetitive and error-prone customization tasks.</p> </li> </ul>"},{"location":"#key-features-of-cloney","title":"Key Features of Cloney","text":"<ul> <li> <p>Dynamic Template Customization: Customize templates by defining variables and leveraging Go templates for dynamic content generation.</p> </li> <li> <p>Automation: Eliminate the need for manual adjustments and repetitive tasks when setting up projects based on templates.</p> </li> <li> <p>Consistency: Ensure consistency and reduce errors across projects derived from Cloney Template Repositories.</p> </li> <li> <p>Flexibility: Adapt templates to a wide range of use cases, from code projects to documentation and beyond.</p> </li> <li> <p>Community: Join a growing community of developers and template maintainers who share and collaborate on Cloney Template Repositories.</p> </li> </ul>"},{"location":"#getting-started-with-cloney","title":"Getting Started with Cloney","text":"<p>Now that you have a glimpse of what Cloney, can do, it's time to dive deeper into how to use it effectively. Head over to the Getting Started guide to set up Cloney and begin using it for your Git projects.</p>"},{"location":"cloney-template-repositories/","title":"Cloney Template Repositories","text":"<p>A Cloney Template Repository serves as the foundation for creating dynamic Git repositories using Cloney. It contains essential information and structures that allow users to customize and generate project templates tailored to their specific needs.</p>"},{"location":"cloney-template-repositories/#what-is-a-cloney-template-repository","title":"What is a Cloney Template Repository?","text":"<p>A Cloney Template Repository is a regular Git repository enriched with a special configuration file, <code>.cloney.yaml</code>, which defines the characteristics and variables of the template. This configuration file serves as the control center for your template, enabling dynamic content generation during the cloning process.</p>"},{"location":"cloney-template-repositories/#key-components-of-a-cloney-template-repository","title":"Key Components of a Cloney Template Repository","text":"<p>A Cloney Template Repository consists of the following key components:</p> <p>1. Git Repository: The core of your project, containing all the files, directories, and code that you want to share as a template.</p> <p>2. <code>.cloney.yaml</code> Metadata File: This special YAML file is located in the root of the repository and stores essential details about the template, such as variable definitions, descriptions, and other crucial information that Cloney relies on to generate dynamic templates.</p>"},{"location":"cloney-template-repositories/#the-power-of-variables","title":"The Power of Variables","text":"<p>One of the primary strengths of Cloney Template Repositories is the ability to define variables within your templates. These variables act as placeholders for values that can be customized during the cloning process, making your templates highly adaptable.</p>"},{"location":"cloney-template-repositories/#template-configuration","title":"Template Configuration","text":"<p>The <code>.cloney.yaml</code> metadata file also allows you to configure some aspects of your template. These configurations are optional and can be omitted if you don't require them. For example, you can define paths to ignore when cloning the template, ensuring that specific files or directories are excluded from the customization process.</p>"},{"location":"cloney-template-repositories/#discover-cloney-templates-in-action","title":"Discover Cloney Templates in Action","text":"<p>Explore Cloney templates and see how they work by visiting the Cloney Example Template Repository. Here, you can:</p> <ul> <li>Explore its structure.</li> <li>Check out its <code>.cloney.yaml</code> metadata file.</li> <li>Customize variables to see Cloney in action.</li> </ul> <p>Experience the simplicity of project setup and customization by exploring this example repository.</p>"},{"location":"getting-started/","title":"Getting Started with Cloney","text":"<p>Whether you want to use existing Cloney templates or create your own, the first step is to install the Cloney Command-Line Interface (CLI) on your system.</p>"},{"location":"getting-started/#installing-cloney","title":"Installing Cloney","text":"<p>To begin your Cloney journey, follow these steps to install the Cloney CLI on your system. You can install Cloney on Windows, Linux, or macOS.</p> Windows Linux and macOS  <p>For information about the latest changes and to explore more versions, check out the Changelog and Releases on GitHub.</p>"},{"location":"getting-started/#step-1-download-the-cloney-executable-for-windows","title":"Step 1: Download the Cloney Executable for Windows","text":"<p>Refer to the table below to choose the download button corresponding to your operating system's architecture:</p> 1.1.0 (Latest)  <p> Operating System Architecture Download Link Windows amd64 Download Latest (1.1.0) arm64 Download Latest (1.1.0) </p> <p>Compatibility</p> <p>This version of Cloney is compatible with the following <code>.cloney.yaml</code> manifest versions: <code>v1</code>.</p>"},{"location":"getting-started/#step-2-unzip-the-downloaded-file-and-add-cloney-to-your-systems-path","title":"Step 2: Unzip the Downloaded File and Add Cloney to Your System's PATH","text":"<p>After downloading Cloney, to make it accessible from the command line, you will need to unzip the downloaded file and then add the Cloney executable to your system's PATH:</p> <ol> <li> <p>Unzip the Downloaded File: Locate the downloaded Cloney zip file and right-click on it. Select \"Extract All\" from the context menu and follow the prompts to unzip the file.</p> </li> <li> <p>Open the Start Menu: Click on the Windows icon in the taskbar to open the Start Menu.</p> </li> <li> <p>Search for \"Environment Variables\": In the search bar, type \"Environment Variables\" and select \"Edit the system environment variables\" from the results.</p> </li> <li> <p>Open the Environment Variables: In the System Properties window, click the \"Environment Variables\" button near the bottom right.</p> </li> <li> <p>Edit the PATH Variable: In the Environment Variables window, under the \"System variables\" section, find the \"Path\" variable and click \"Edit.\"</p> </li> <li> <p>Add Cloney to PATH: Click \"New\" and then enter the path to the directory where you extracted the Cloney executable file. For example, if you extracted it to <code>C:\\Program Files\\Cloney</code>, add that path. Click \"OK\" to save your changes.</p> </li> <li> <p>Verify Installation: Open a new command prompt window, type <code>cloney</code>, and press Enter. If you see Cloney's command-line interface information, you have successfully added it to your PATH.</p> </li> </ol> <p>That's it! Now, you've successfully unzipped the downloaded file and added Cloney to your system's PATH, allowing you to use it from the command line.</p>"},{"location":"getting-started/#step-1-download-the-cloney-executable-for-linux-or-macos","title":"Step 1: Download the Cloney Executable for Linux or macOS","text":"<p>Select your desired Cloney version and run the presented command. This command downloads and installs the Cloney executable, prompting you to enter your sudo password.</p> 1.1.0 (Latest)  <pre><code>curl -sSL \"https://raw.githubusercontent.com/ArthurSudbrackIbarra/cloney/1.1.0/installation/install.sh\" | sudo bash\n</code></pre> <p>Compatibility</p> <p>This version of Cloney is compatible with the following <code>.cloney.yaml</code> manifest versions: <code>v1</code>.</p> <p>That's it! You've now successfully downloaded and installed Cloney on your system.</p>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<p>Now that you have Cloney installed on your system, you're ready to start working with Cloney templates. Depending on your goals, you can choose one of two paths:</p>"},{"location":"getting-started/#users-path-using-cloney-templates-as-a-user","title":"User's Path: Using Cloney Templates as a User","text":"<p>If you want to leverage existing Cloney templates created by others, follow the path of a user. You can explore and clone templates tailored to various use cases. To get started as a user, head over to the User's Guide for detailed instructions on how to clone and customize Cloney templates.</p>"},{"location":"getting-started/#creators-path-creating-your-own-cloney-templates-as-a-creator","title":"Creator's Path: Creating Your Own Cloney Templates as a Creator","text":"<p>If you're interested in crafting your own Cloney templates and sharing them with the community, follow the path of a creator. You can design templates, define variables, and empower others to generate projects based on your templates. To start creating templates as a creator, visit the Creator's Guide for comprehensive guidance on template creation and customization.</p>"},{"location":"commands/","title":"Cloney Command-Line Interface (CLI)","text":"<p>The Cloney Command-Line Interface (CLI) is the tool you use to interact with Cloney template repositories. It offers a set of straightforward commands that enable you to manage, customize, and work with Cloney templates.</p>"},{"location":"commands/#available-commands","title":"Available Commands","text":"<p>Here is a list of the available commands in the Cloney CLI:</p> <ul> <li><code>clone</code>: Clone a Cloney template repository.</li> <li><code>docs</code>: Open the Cloney documentation in your browser.</li> <li><code>dry-run</code>: Run a template repository in dry-run mode for testing.</li> <li><code>info</code>: Display information about a Cloney template repository.</li> <li><code>start</code>: Start a Cloney template repository.</li> <li><code>validate</code>: Validate your Cloney template repository.</li> <li><code>version</code>: Check the current version of Cloney.</li> </ul>"},{"location":"commands/clone/","title":"<code>clone</code> Command","text":"Cloney \u2265 0.1.0 <p>Clone a template repository using the <code>clone</code> command. This command allows you to clone a Cloney Template Repository while providing the option to customize it with specific variable values.</p> <p>By default, this command searches for a file named <code>.cloney-vars.yaml</code> in your current directory for variable values. However, with the <code>--variables</code> flag you can specify a different file or pass the variables inline as YAML.</p>"},{"location":"commands/clone/#flags","title":"Flags","text":"Flag Description Default Value <code>-b, --branch string</code> Specifies the Git branch. <code>\"main\"</code> <code>-o, --output string</code> Specifies the path to clone the repository to. <code>-t, --tag string</code> Specifies the Git tag. <code>-k, --token string</code> Specifies the Git token, if referencing a private Git repository. <code>-v, --variables string</code> Specifies the path to a template variables file or raw YAML. <code>\".cloney-vars.yaml\"</code>"},{"location":"commands/clone/#example-1-basic-cloning","title":"Example 1: Basic Cloning","text":"<p>Clone a template repository without specifying a variables file:</p> <pre><code>cloney clone https://github.com/username/repository.git\n</code></pre>"},{"location":"commands/clone/#example-2-using-a-custom-variables-file","title":"Example 2: Using a Custom Variables File","text":"<p>Clone a template repository and specify a different variables file (e.g., <code>variables.yaml</code>):</p> <pre><code>cloney clone https://github.com/username/repository.git -v variables.yaml\n</code></pre>"},{"location":"commands/clone/#example-3-inline-variables","title":"Example 3: Inline Variables","text":"<p>Clone a template repository with inline variable values:</p> <pre><code>cloney clone https://github.com/username/repository.git -v '{ var1: value, var2: value }'\n</code></pre>"},{"location":"commands/docs/","title":"<code>docs</code> Command","text":"Cloney \u2265 0.2.0 <p>The <code>docs</code> command opens the Cloney documentation in your browser.</p>"},{"location":"commands/docs/#example-1-basic-documentation-open","title":"Example 1: Basic Documentation Open","text":"<p>Open the Cloney documentation in your browser:</p> <pre><code>cloney docs\n</code></pre>"},{"location":"commands/dry-run/","title":"<code>dry-run</code> Command","text":"Cloney \u2265 1.0.0Cloney \u2265 0.1.0 &lt; 1.0.0 <p>The <code>dry-run</code> command is used for debugging purposes, allowing you to inspect the output generated by your Cloney Template Repository with the provided variables. This command helps you verify variable replacement and check for errors in the cloning process.</p> <p>By default, this command searches for a file named <code>.cloney-vars.yaml</code> in your current directory for variable values. However, with the <code>--variables</code> flag you can specify a different file or pass the variables inline as YAML.</p> <p>The <code>dry-run</code> command is used for debugging purposes, allowing you to inspect the output generated by your Cloney Template Repository with the provided variables. This command helps you verify variable replacement and check for errors in the cloning process.</p> <p>By default, this command searches for a file named <code>.cloney-vars.yaml</code> in your current directory for variable values. However, with the <code>--variables</code> flag you can specify a different file or pass the variables inline as YAML.</p>"},{"location":"commands/dry-run/#flags","title":"Flags","text":"Flag Description Default Value <code>-r, --hot-reload</code> Enable hot reload mode. <code>false</code> <code>-o, --output string</code> Specifies the path to output the filled template files. <code>\"cloney-dry-run-results\"</code> <code>-i, --output-in-terminal</code> Outputs the filled template file contents in the terminal instead of creating the files. <code>false</code> <code>-v, --variables string</code> Specifies the path to a template variables file or raw YAML. <code>\".cloney-vars.yaml\"</code>"},{"location":"commands/dry-run/#example-1-using-default-variables-file","title":"Example 1: Using Default Variables File","text":"<p>Run a dry-run on your local template repository using the default variables file, <code>.cloney-vars.yaml</code>:</p> <pre><code>cloney dry-run\n</code></pre>"},{"location":"commands/dry-run/#example-2-using-a-custom-variables-file","title":"Example 2: Using a Custom Variables File","text":"<p>Specify a different variables file (e.g., <code>variables.yaml</code>) for the dry-run:</p> <pre><code>cloney dry-run -v variables.yaml\n</code></pre>"},{"location":"commands/dry-run/#example-3-inline-variables","title":"Example 3: Inline Variables","text":"<p>Run a dry-run with inline variable values:</p> <pre><code>cloney dry-run -v '{ var1: value, var2: value }'\n</code></pre>"},{"location":"commands/dry-run/#example-4-dry-run-from-local-path","title":"Example 4: Dry-run from Local Path","text":"<p>Run a dry-run on a template repository from a local path:</p> <pre><code>cloney dry-run ./path/to/my/template -v variables.yaml\n</code></pre>"},{"location":"commands/dry-run/#example-5-hot-reload-mode","title":"Example 5: Hot Reload Mode","text":"<p>Run a dry-run on a template repository with hot reload mode enabled. This mode will watch for changes in the template repository and automatically re-run the <code>dry-run</code> command for you:</p> <pre><code>cloney dry-run -v variables.yaml -r\n</code></pre>"},{"location":"commands/dry-run/#flags_1","title":"Flags","text":"Flag Description Default Value <code>-o, --output string</code> Specifies the path to output the filled template files. <code>\"cloney-dry-run-results\"</code> <code>-i, --output-in-terminal</code> Outputs the filled template file contents in the terminal instead of creating the files. <code>false</code> <code>-v, --variables string</code> Specifies the path to a template variables file or raw YAML. <code>\".cloney-vars.yaml\"</code>"},{"location":"commands/dry-run/#example-1-using-default-variables-file_1","title":"Example 1: Using Default Variables File","text":"<p>Run a dry-run on your local template repository using the default variables file, <code>.cloney-vars.yaml</code>:</p> <pre><code>cloney dry-run\n</code></pre>"},{"location":"commands/dry-run/#example-2-using-a-custom-variables-file_1","title":"Example 2: Using a Custom Variables File","text":"<p>Specify a different variables file (e.g., <code>variables.yaml</code>) for the dry-run:</p> <pre><code>cloney dry-run -v variables.yaml\n</code></pre>"},{"location":"commands/dry-run/#example-3-inline-variables_1","title":"Example 3: Inline Variables","text":"<p>Run a dry-run with inline variable values:</p> <pre><code>cloney dry-run -v '{ var1: value, var2: value }'\n</code></pre>"},{"location":"commands/dry-run/#example-4-dry-run-from-local-path_1","title":"Example 4: Dry-run from Local Path","text":"<p>Run a dry-run on a template repository from a local path:</p> <pre><code>cloney dry-run ./path/to/my/template -v variables.yaml\n</code></pre>"},{"location":"commands/info/","title":"<code>info</code> Command","text":"Cloney \u2265 0.1.0 <p>Get information about a Cloney template repository using the <code>info</code> command. This command provides details about a Cloney template repository, including its name, description, and variables.</p> <p>The <code>info</code> command can retrieve information from both local and remote template repositories. By default, it retrieves information from the current directory, assuming it is a template repository.</p>"},{"location":"commands/info/#flags","title":"Flags","text":"Flag Description Default Value <code>-b, --branch string</code> Specifies the Git branch when referencing a git repository. <code>\"main\"</code> <code>-t, --tag string</code> Specifies the Git tag when referencing a git repository. <code>-k, --token string</code> Specifies the Git token when referencing a private git repository."},{"location":"commands/info/#example-1-basic-info-retrieval","title":"Example 1: Basic Info Retrieval","text":"<p>Retrieve information about the current template repository (assuming it is a template repository):</p> <pre><code>cloney info\n</code></pre>"},{"location":"commands/info/#example-2-info-from-local-path","title":"Example 2: Info from Local Path","text":"<p>Retrieve information about a template repository from a local path:</p> <pre><code>cloney info ./path/to/my/template\n</code></pre>"},{"location":"commands/info/#example-3-info-from-remote-repository-url","title":"Example 3: Info from Remote Repository URL","text":"<p>Retrieve information about a template repository from a remote repository URL:</p> <pre><code>cloney info https://github.com/username/repository.git\n</code></pre>"},{"location":"commands/start/","title":"<code>start</code> Command","text":"Cloney \u2265 0.1.0 <p>Start a new Cloney template repository using the <code>start</code> command. This command creates a directory with all the necessary files to begin a new Cloney template repository.</p>"},{"location":"commands/start/#flags","title":"Flags","text":"Flag Description Default Value <code>-a, --authors stringArray</code> Specifies the authors of the template repository. <code>[]</code> <code>-d, --description string</code> Specifies the description of the template repository. <code>\"A Cloney template repository\"</code> <code>-l, --license string</code> Specifies the license of the template repository. <code>\"MIT\"</code> <code>-n, --name string</code> Specifies the name of the template repository. <code>\"cloney-template\"</code> <code>-y, --non-interactive</code> Skip questions and use default values and/or flags. <code>false</code> <code>-o, --output string</code> Specifies the directory where the template repository will be saved. <code>\"cloney-template\"</code>"},{"location":"commands/start/#example-1-basic-template-creation","title":"Example 1: Basic Template Creation","text":"<p>Start a new template repository with interactive prompts:</p> <pre><code>cloney start\n</code></pre>"},{"location":"commands/start/#example-2-non-interactive-mode","title":"Example 2: Non-Interactive Mode","text":"<p>Start a new template repository with default values and skip prompts:</p> <pre><code>cloney start -y\n</code></pre>"},{"location":"commands/validate/","title":"<code>validate</code> Command","text":"Cloney \u2265 0.1.0 <p>Validate your Cloney template repository using the <code>validate</code> command. This command checks whether your Cloney template repository is valid by verifying the presence of the <code>.cloney.yaml</code> metadata file and checking if it is valid.</p>"},{"location":"commands/validate/#example-1-basic-validation","title":"Example 1: Basic Validation","text":"<p>Validate the current template repository (assuming it is a template repository):</p> <pre><code>cloney validate\n</code></pre>"},{"location":"commands/validate/#example-2-validation-from-local-path","title":"Example 2: Validation from Local Path","text":"<p>Validate a template repository from a local path:</p> <pre><code>cloney validate ./path/to/my/template\n</code></pre>"},{"location":"commands/version/","title":"<code>version</code> Command","text":"Cloney \u2265 0.1.0 <p>The <code>version</code> command in Cloney allows you to check the current version of the Cloney CLI tool.</p>"},{"location":"commands/version/#example-1-basic-version-check","title":"Example 1: Basic Version Check","text":"<p>Check the current version of Cloney:</p> <pre><code>cloney version\n</code></pre>"},{"location":"creators/","title":"Creator's Path","text":"<p>Welcome to the world of Cloney template creation! If you're interested in crafting and customizing Cloney Template Repositories, you're in the right place. Here, you'll find a collection of resources to help you get started and become a proficient template creator. Explore the following sections to embark on your journey:</p> <ul> <li> <p>Creating Your First Template Repository</p> <p>Learn how to create your very first Cloney Template Repository, allowing you to share project templates that others can clone and customize.</p> <p> Creating Your First Template Repository</p> </li> <li> <p>The <code>.cloney.yaml</code> Metadata File</p> <p>Learn how to define the structure and variables of your Cloney Template Repository using the <code>.cloney.yaml</code> metadata file.</p> <p> The Metadata File</p> </li> <li> <p>Accessing Template Variables</p> <p>Discover how to access and utilize template variables, allowing you to create dynamic and adaptable templates.</p> <p> Accessing Template Variables</p> </li> <li> <p>Reusable Blocks</p> <p>Learn how to create reusable blocks of content that can be easily integrated into multiple template files.</p> <p> Reusable Blocks</p> </li> <li> <p>Ghost Files</p> <p>Understand how to use ghost files to organize, share, and reuse template logic without affecting the final output of the cloned project.</p> <p> Ghost Files</p> </li> <li> <p>Dynamic File Generation</p> <p>Explore the intricacies of dynamic file generation within Cloney templates, enabling you to generate files and directories based on user-provided variables.</p> <p> Dynamic File Generation</p> </li> <li> <p>Cloney Template Functions</p> <p>Learn how to use Cloney custom template functions to maximize your template customization capabilities.</p> <p> Cloney Template Functions</p> </li> <li> <p>Go Template Tutorials</p> <p>Get acquainted with Go templates and their powerful syntax. These tutorials provide insights into using Go templates effectively in your Cloney Template Repository.</p> <p> Go Template Tutorials</p> </li> <li> <p>Cloney Visual Studio Code Extension</p> <p>Discover how to use the Cloney Visual Studio Code extension to enhance your Cloney template repository management experience within the familiar Visual Studio Code environment.</p> <p> Cloney Visual Studio Code Extension</p> </li> </ul>"},{"location":"creators/accessing-template-variables/","title":"Accessing Template Variables","text":"<p>Cloney makes it effortless to access and utilize variables within your template files. It employs the Go template syntax, a powerful and flexible language for generating text and code. It's essential to note that you don't require any knowledge of Go programming to utilize Cloney effectively.</p> <p>To access and use variables within your template files, follow these steps:</p> <ol> <li> <p>Enclose Variables with Double Curly Braces: To indicate that a piece of text should be replaced with a variable's value, enclose the variable name within double curly braces. For example, <code>{{ .VariableName }}</code>.</p> </li> <li> <p>Use the Dot (<code>.</code>) to Access Variables: In Go templates, you access variables by prefixing their names with a dot (<code>.</code>). This dot signifies the context in which the variable is defined.</p> </li> </ol> <p>Example:</p> <p>Imagine you're working with a Cloney Template Repository for a billing system. In this template, you want to create a customized HTML file based on various parameters. Let's explore how Cloney's variables can make this process effortless.</p> <p>Here's a snippet from your template HTML file, <code>index.html</code>:</p> index.html<pre><code>&lt;!-- File: index.html --&gt;\n\n&lt;h1&gt;\n  {{ .app_name }} is a fantastic app that supports the following currencies:\n&lt;/h1&gt;\n&lt;ul&gt;\n  {{- range .currencies }}\n  &lt;li&gt;{{ . }}&lt;/li&gt;\n  {{- end }}\n&lt;/ul&gt;\n\n{{- if .enable_https }}\n&lt;p&gt;HTTPS is enabled.&lt;/p&gt;\n{{- end }}\n</code></pre> <p>Now, let's break down what's happening here:</p> <p><code>{{ .app_name }}</code>: This placeholder will be replaced with the user-defined name of the application when you generate your customized template.</p> <p><code>{{- range .currencies }} ... {{- end }}</code>: This construct iterates through the list of currencies provided by the user during the cloning process. It dynamically generates list items for each currency.</p> <p><code>{{- if .enable_https }} ... {{- end }}</code>: This conditional block checks if the user has chosen to enable HTTPS during cloning. If so, it includes a paragraph indicating that HTTPS is enabled.</p> <p>When you use Cloney to create your template based on user input, it automatically populates these placeholders with the values you specified during the cloning process. This results in a tailored HTML file that perfectly suits your requirements.</p> <p>Here's an example of what the generated HTML could look like:</p> index.html<pre><code>&lt;!-- File: index.html --&gt;\n\n&lt;h1&gt;MyApp is a fantastic app that supports the following currencies:&lt;/h1&gt;\n&lt;ul&gt;\n  &lt;li&gt;Real&lt;/li&gt;\n  &lt;li&gt;US Dollar&lt;/li&gt;\n  &lt;li&gt;Yen&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;HTTPS is enabled.&lt;/p&gt;\n</code></pre> <p>It's important to mention that, although this example uses HTML, you can use Cloney variables in any type of file. This includes YAML, JSON, Markdown, and even source code files.</p>"},{"location":"creators/cloney-metadata-file/","title":"The Cloney Metadata File","text":"<p>To harness the full potential of Cloney Template Repositories, it's crucial to grasp the structure and content of the <code>.cloney.yaml</code> metadata file. This file serves as the blueprint for your template, defining its characteristics, variables, and default settings. Below is an illustrative example of a <code>.cloney.yaml</code> file:</p> Manifest v1 (Latest) .cloney.yaml<pre><code>manifest_version: v1\n\nname: Bank Site\ndescription: A template to create a site for a bank.\nauthors:\n  - Chico Buarque\n  - Freddie Mercury\n  - John Lennon\nlicense: MIT\ntemplate_version: \"1.1.0\"\n\nconfiguration:\n  ignore_paths:\n    - development/*.html\n    - images/*.jpg\n\nvariables:\n  - name: app_name\n    description: The name of your application.\n    default: my_app\n    example: my_app\n\n  - name: enable_https\n    description: Wheter to enable HTTPS or not.\n    example: true\n\n  - name: currencies\n    description: List of currencies to use.\n    example:\n      - Real\n      - US Dollar\n      - Yen\n</code></pre> <p>manifest_version: The version of the Cloney manifest file used in the template, ensuring compatibility with different versions of Cloney.</p> <p>name: The name of your template, providing a clear identifier for users.</p> <p>description: A brief but informative description of your template's purpose and functionality.</p> <p>authors: A list of contributors or creators of the template, acknowledging their role in its development.</p> <p>license: The licensing information for your template, specifying how others can use and distribute it.</p> <p>template_version: The version number of your template, allowing users to identify different releases.</p> <p>configuration: A section that allows you to configure some optional aspects of your template.</p> <p>variables: A list of variables that users can customize during the cloning process.</p>"},{"location":"creators/cloney-metadata-file/#template-configuration","title":"Template Configuration","text":"<p>The <code>.cloney.yaml</code> metadata file also allows you to configure some aspects of your template. These configurations are optional and can be omitted if you don't require them.</p> <p>Ignore Paths: This configuration allows you to specify a list of paths to ignore when cloning the template. This is useful for excluding files that are not relevant to the template's customization process.</p>"},{"location":"creators/cloney-metadata-file/#template-variables","title":"Template Variables","text":"<p>Within the <code>.cloney.yaml</code> metadata file, Cloney allows you to define variables that users can customize during the cloning process. These variables play a central role in enabling dynamic template creation, ensuring that users can tailor templates to their specific requirements.</p> <p>Name: Assign a unique identifier to each variable, making it easy for users to reference and customize.</p> <p>Description: Provide a clear and concise description of each variable's purpose. These descriptions guide users in understanding how each variable affects the template.</p> <p>Default (Optional): Specify a default value for each variable. This value is used when a user doesn't provide a custom value during the cloning process. If this field is omitted, Cloney assumes that the variable is mandatory and must be informed by the user.</p> <p>Example Value: Every variable must include an example value that demonstrates how it should be formatted and used. This example serves as a practical reference for users, helping them correctly configure variables within their customized templates.</p> <p>Validate (Optional): This parameter determines whether the variable's value should undergo validation when it is cloned. By default, this setting is enabled (<code>true</code>). Although not recommended, you have the option to disable validation by setting this field to <code>false</code>. Disabling validation can be particularly beneficial for variables with dynamic characteristics, such as variables that may assume various types or maps with dynamically changing keys.</p>"},{"location":"creators/creating-your-first-template-repository/","title":"Creating Your First Template Repository","text":"<p>Creating a Cloney template repository allows you to share project templates that others can clone and customize. Follow these steps to create your very first Cloney template repository:</p>"},{"location":"creators/creating-your-first-template-repository/#step-1-initialize-a-new-template-repository","title":"Step 1: Initialize a New Template Repository","text":"<p>Use the Cloney Command-Line Interface (CLI) to start a new Cloney template repository. This will create a directory with the necessary files for your template.</p> <pre><code>cloney start\n</code></pre> <p>This command will guide you through the setup process, where you can specify details like authors, description, and license for your template repository.</p>"},{"location":"creators/creating-your-first-template-repository/#step-2-define-template-variables","title":"Step 2: Define Template Variables","text":"<p>Within your template repository directory, you can define variables in a <code>.cloney.yaml</code> metadata file. These variables will be customizable by users who clone your template repository. Here's an example:</p> .cloney.yaml<pre><code># Other metadata fields...\n\n# Define variables.\nvariables:\n  - name: app_name\n    description: The name of the application.\n    default: My App\n    example: My App\n\n  - name: dark_mode\n    description: Whether or not to enable dark mode.\n    example: true\n</code></pre> <p>Define the variables that users can customize and provide descriptions and examples to help users understand their purpose.</p>"},{"location":"creators/creating-your-first-template-repository/#step-3-create-template-files","title":"Step 3: Create Template Files","text":"<p>Create the template files that make up your project or application. In these template files, you can reference the user variables you defined in the <code>.cloney.yaml</code> file. For example, to include the user's chosen <code>app_name</code> in a file, use the variable like this:</p> example-file.py<pre><code>print(\"Hello, World!\")\nprint(\"This is my app: {{ .app_name }}\")\nprint(\"Bye!\")\n</code></pre> <p>You can insert variables throughout your template files to make them dynamic and adapt to the user's inputs.</p>"},{"location":"creators/creating-your-first-template-repository/#step-4-share-your-template-repository","title":"Step 4: Share Your Template Repository","text":"<p>Share your template repository on platforms like GitHub, GitLab, or Bitbucket. Others can then clone your template repository and customize it according to their project requirements.</p> <ul> <li>Upload your template repository to a code hosting platform of your choice.</li> <li>Ensure that the repository is public or accessible to your intended audience.</li> </ul>"},{"location":"creators/dynamic-file-generation/","title":"Dynamic File Generation","text":"<p>Cloney, allows you to not only replace placeholders with variable values but also generate files and directories dynamically. This feature is particularly useful for creating multiple files based on a template and data. Let's dive into the process using a practical example.</p>"},{"location":"creators/dynamic-file-generation/#example-scenario","title":"Example Scenario","text":"<p>Suppose you have a YAML variables file like the one below:</p> .cloney-vars.yaml<pre><code>app_name: MyApp\ncurrencies:\n  - name: USD\n    symbol: $\n    description: \"United States Dollar\"\n  - name: EUR\n    symbol: \u20ac\n    description: \"Euro\"\n  - name: GBP\n    symbol: \u00a3\n    description: \"British Pound\"\n</code></pre> <p>Your goal is to create a home page that lists all the currencies and links to a dedicated page for each currency.</p>"},{"location":"creators/dynamic-file-generation/#creating-the-homehtml-template","title":"Creating the <code>home.html</code> Template","text":"<p>You can start by creating a <code>home.html</code> file that dynamically generates the content for each currency and generates links to their respective pages.</p> home.html<pre><code>&lt;!-- File: home.html --&gt;\n\n{{- define \"currency-file-content\" -}}\n&lt;!-- File: {{ .name }}.html --&gt;\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Currency: {{ .name }}&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Currency: {{ .name }}&lt;/h1&gt;\n    &lt;p&gt;Symbol: {{ .symbol }}&lt;/p&gt;\n    &lt;p&gt;Description: {{ .description }}&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n{{- end -}}\n\n&lt;p&gt;Check out the different currencies:&lt;/p&gt;\n\n&lt;ul&gt;\n{{- range .currencies }}\n{{- $fileName := printf \"%s.html\" .name }}\n{{- toFile $fileName \"currency-file-content\" . }}\n  &lt;li&gt;\n    &lt;a href=\"{{ $fileName }}\"&gt;{{ .name }}&lt;/a&gt;\n  &lt;/li&gt;\n{{- end }}\n&lt;/ul&gt;\n</code></pre> <p>Let's break down what's happening within this template:</p> <p><code>{{- define \"currency-file-content\" -}} ... {{- end -}}</code>: This defines a template named <code>currency-file-content</code> that will be used to generate the content of each currency's page.</p> <p><code>{{- range .currencies }} ... {{- end }}</code>: This iterates through the list of currencies provided in your YAML data.</p> <p><code>{{- $fileName := printf \"%s.html\" .name }}</code>: This creates a variable named <code>fileName</code> to store the name of the file to be generated. The file name will be constructed using the currency's name with the <code>.html</code> extension.</p> <p><code>{{- toFile $fileName \"currency-file-content\" . }}</code>: This generates a file named <code>fileName</code> using the <code>currency-file-content</code> template and the current currency as the context. This is where the dynamic file generation happens.</p>"},{"location":"creators/dynamic-file-generation/#generated-output","title":"Generated Output","text":"<p>When Cloney processes this template, it generates several files. The <code>home.html</code> file will have the following content:</p> home.html<pre><code>&lt;!-- File: home.html --&gt;\n\n&lt;p&gt;Check out the different currencies:&lt;/p&gt;\n&lt;ul&gt;\n  &lt;li&gt;\n    &lt;a href=\"USD.html\"&gt;USD&lt;/a&gt;\n  &lt;/li&gt;\n  &lt;li&gt;\n    &lt;a href=\"EUR.html\"&gt;EUR&lt;/a&gt;\n  &lt;/li&gt;\n  &lt;li&gt;\n    &lt;a href=\"GBP.html\"&gt;GBP&lt;/a&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n</code></pre> <p>Additionally, Cloney generates three other files, namely <code>USD.html</code>, <code>EUR.html</code>, and <code>GBP.html</code>, each containing content specific to the respective currency:</p> USD.html<pre><code>&lt;!-- File: USD.html --&gt;\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Currency: USD&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Currency: USD&lt;/h1&gt;\n    &lt;p&gt;Symbol: $&lt;/p&gt;\n    &lt;p&gt;Description: United States Dollar&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"creators/dynamic-file-generation/#known-limitations-and-workarounds","title":"Known Limitations and Workarounds","text":"<p>While Cloney's dynamic file generation is a powerful feature, there are certain limitations and workarounds to consider when working with it.</p>"},{"location":"creators/dynamic-file-generation/#limitation-variable-scopes-in-dynamic-file-generation","title":"Limitation: Variable Scopes in Dynamic File Generation","text":"<p>When working with Cloney's dynamic file generation, one notable limitation is related to variable scopes. In the example provided, the challenge lies in accessing variables defined in the outer scope, which may not be directly accessible within the <code>currency-file-content</code> template. This is because the context within the template is limited to the data passed to it, and it may not grant direct access to variables defined outside the template.</p>"},{"location":"creators/dynamic-file-generation/#workaround-using-a-dictionary-to-pass-context","title":"Workaround: Using a Dictionary to Pass Context","text":"<p>To address the issue of variable scopes and ensure that the <code>currency-file-content</code> template can access all the necessary variables, a workaround involves using a dictionary. This dictionary is used to encapsulate the required variables, both from the outer scope and the local context, and pass them as a single context to the <code>toFile</code> function.</p> <p>Here's how to implement this workaround:</p> home.html<pre><code>{{- $dict := dict \"outer\" $ \"local\" . -}}\n{{- toFile $fileName \"currency-file-content\" $dict -}}\n</code></pre> <p>In this code, a dictionary named <code>$dict</code> is created to hold two key-value pairs: <code>\"outer\"</code> and <code>\"local\"</code>. <code>\"outer\"</code> is assigned the value of the outer scope context (<code>$</code>), while <code>\"local\"</code> is assigned the value of the current currency data (<code>.</code>).</p>"},{"location":"creators/dynamic-file-generation/#accessing-variables-in-the-template","title":"Accessing Variables in the Template","text":"<p>After implementing the workaround of using a dictionary to encapsulate both outer scope and local variables, you can access these variables within the <code>currency-file-content</code> template as follows:</p> home.html<pre><code>{{- define \"currency-file-content\" -}}\n&lt;p&gt;The app name is: {{ .outer.app_name }}&lt;/p&gt;\n&lt;p&gt;The currency name is: {{ .local.name }}&lt;/p&gt;\n{{- end -}}\n</code></pre> <p><code>{{ .outer.app_name }}</code> accesses the <code>app_name</code> variable from the outer scope, which might not have been directly accessible within the template. The <code>.outer</code> context represents the outer scope context, and you can access any variable defined outside the template block.</p> <p><code>{{ .local.name }}</code> accesses the <code>name</code> variable from the local context, which contains data specific to the current currency being processed. The <code>.local</code> context provides access to all variables passed as local context data, ensuring you can work seamlessly with variables specific to the current block.</p> <p>By adopting this approach, you can effectively address variable scope challenges and ensure that the <code>currency-file-content</code> template has access to all the variables it needs to generate dynamic files accurately. This method allows for flexibility in working with variables, both from the outer scope and the local context, within your dynamically generated templates.</p>"},{"location":"creators/ghost-files/","title":"Ghost Files","text":"<p>In Cloney template repositories, ghost files are special files or directories whose names start with double underscores (<code>__</code>). These files are ignored during the cloning process, meaning they won't be included in the final result. However, any Go template logic embedded within these ghost files is still processed.</p>"},{"location":"creators/ghost-files/#creating-ghost-files","title":"Creating Ghost Files","text":"<p>To create a ghost file, follow these steps:</p> <ol> <li> <p>Name Convention: Begin by naming your file or directory with a double underscore prefix, like <code>__my-ghost-file.txt</code> or <code>__my-ghost-dir</code>.</p> </li> <li> <p>Define Template Logic: Inside the ghost file, include Go template logic using constructs like <code>{{ ... }}</code> and other Go template syntax.</p> </li> </ol> <p>Here's an example of a simple ghost file named <code>__ghost-file.txt</code>:</p> __ghost-file.txt<pre><code>This is a ghost file.\nThis file won't appear in the cloned project.\n\n{{- $variable := \"You can use this variable anywhere.\" -}}\n\n{{- define \"my-ghost-block\" }}\nYou can reference this block in non-ghost template files!\n{{- end }}\n</code></pre>"},{"location":"creators/ghost-files/#usage-and-purpose","title":"Usage and Purpose","text":"<p>Ghost files serve various purposes in Cloney template repositories:</p> <ul> <li> <p>Organizing Template Logic: Ghost files provide a space to organize and encapsulate template logic without affecting the cloned project's structure.</p> </li> <li> <p>Sharing Common Logic: You can create shared ghost files containing commonly used template logic, making it accessible across multiple template files.</p> </li> <li> <p>Conditional Content: Include conditional logic in ghost files to control content based on specific criteria without cluttering the cloned project.</p> </li> </ul>"},{"location":"creators/ghost-files/#example-use-case","title":"Example Use Case","text":"<p>Suppose you need to include a license header in every file of your cloned project. You can create a ghost file <code>__license-header.txt</code> containing the license header definition and then reference it in all the other template files.</p> __license-header.txt<pre><code>{{- define \"license-header\" -}}\nThis is a license header.\nCopyright 2024.\n{{- end -}}\n</code></pre> template-file.txt<pre><code>{{ template \"license-header\" }}\n\nContent of the template file...\n</code></pre> <p>In this way, ghost files provide a convenient mechanism to structure, share, and reuse template logic without affecting the final output of the cloned project.</p>"},{"location":"creators/reusable-blocks/","title":"Reusable Blocks","text":"<p>In Cloney template repositories, you can create reusable blocks of content using the <code>define</code> structure. These named templates allow you to define specific content that can be easily integrated into multiple template files. This enables you to create components that can be reused throughout your Cloney template repository.</p> <p>These blocks are global in scope, which means they are accessible from any file in any directory within your Cloney template repository. Therefore, it's essential to choose unique block names to avoid conflicts.</p>"},{"location":"creators/reusable-blocks/#how-to-create-reusable-blocks","title":"How to Create Reusable Blocks","text":"<p>To create a reusable block in a Cloney template repository, follow these steps:</p> <ol> <li> <p>Open a Template File: Begin by opening a template file where you want to define your reusable block.</p> </li> <li> <p>Define the Block: Inside the template file, use the <code>define</code> structure to define your reusable block.</p> </li> <li> <p>Add Block Content: Inside the <code>define</code> structure, add the content you want to include in the reusable block.</p> </li> </ol> <p>Here's an example of creating a simple reusable block named <code>\"greeting\"</code>:</p> hello-1.txt<pre><code>{{ define \"greeting\" }}\nHello, {{ . }}!\n{{ end }}\n</code></pre> <p>In this example, we've defined a reusable block named <code>\"greeting\"</code> that includes a greeting message to be displayed. The <code>{{ . }}</code> placeholder is a reference to the current context, which allows you to insert dynamic values when the block is used. In this case, <code>{{ . }}</code> represents the value passed to the block when it's referenced.</p>"},{"location":"creators/reusable-blocks/#using-reusable-blocks","title":"Using Reusable Blocks","text":"<p>Once you've defined a reusable block, you can easily use it in other template files. To do so, follow these steps:</p> <ol> <li> <p>Reference the Block: In your target template file, reference the defined reusable block using the <code>template</code> function.</p> </li> <li> <p>Customize Block Variables: If the defined block includes variables, you can customize them in the <code>template</code> function by passing values.</p> </li> </ol> <p>Here's an example of using the <code>\"greeting\"</code> reusable block we defined earlier in a different template file:</p> hello-2.txt<pre><code>{{ template \"greeting\" .name }}\n</code></pre> <p>In this example, we're referencing the <code>\"greeting\"</code> reusable block and passing the value of an arbitrary variable called <code>name</code> as an argument to the block. This enables us to customize the content of the <code>\"greeting\"</code> block based on the specific value provided when it's used.</p> <p>It's essential to pass the necessary data to your reusable blocks via the context to ensure that you can access and use them effectively within the <code>define</code> structures. The context passed to a <code>define</code> structure defines the scope of data and variables that can be accessed within the block, and each structure has its own scope.</p>"},{"location":"creators/reusable-blocks/#the-include-function","title":"The <code>include</code> Function","text":"<p>In addition to the <code>template</code> function, you can also use the <code>include</code> function. The <code>include</code> function allows you to bring in a block and pass the results to other template functions.</p> <p>Here's an example of using the <code>include</code> function to include a block named <code>\"my-block-name\"</code> with its content indented by 4 spaces and converted to uppercase:</p> hello-3.txt<pre><code>{{ include \"my-block-name\" . | nindent 4 | upper }}\n</code></pre>"},{"location":"creators/reusable-blocks/#combining-reusable-blocks-with-ghost-files","title":"Combining Reusable Blocks with Ghost Files","text":"<p>Ghost files in Cloney template repositories, identified by names starting with double underscores (<code>__</code>), play a complementary role when used in conjunction with reusable blocks. This combination enhances the modularity and maintainability of your templates. Check out the Ghost Files page to learn more.</p>"},{"location":"creators/visual-studio-code-extension/","title":"Cloney Visual Studio Code Extension","text":"<p>The Cloney Visual Studio Code extension is a powerful companion to the Cloney tool, designed to enhance your experience when working with Cloney template repositories directly within the Visual Studio Code environment.</p> <p> </p>"},{"location":"creators/visual-studio-code-extension/#features","title":"Features","text":""},{"location":"creators/visual-studio-code-extension/#1-snippets-and-autocompletion","title":"1. Snippets and Autocompletion","text":"<ul> <li> <p><code>.cloney.yaml</code> Support: Enjoy snippets and autocompletion when working with the <code>.cloney.yaml</code> metadata file. This ensures a smoother and error-free editing experience.</p> <p><p> </p></p> </li> <li> <p><code>.cloney-vars</code> File Support: Seamlessly define and manage variables in your Cloney template repositories with snippets and autocompletion in <code>.cloney-vars</code> files.</p> <p><p> </p></p> </li> <li> <p>Partial Go Template Syntax Autocompletion: Write Go template syntax with autocompletion, improving productivity and reducing errors.</p> <p><p> </p></p> </li> </ul>"},{"location":"creators/visual-studio-code-extension/#2-run-cloney-commands-directly-from-vscode","title":"2. Run Cloney Commands Directly from VSCode","text":"<ul> <li> <p>Clone, Dry-run, and Validate Commands: Execute essential Cloney commands directly from the Visual Studio Code user interface using the command palette.</p> <p><p> </p></p> </li> </ul>"},{"location":"creators/visual-studio-code-extension/#getting-started","title":"Getting Started","text":"<p>Install the Cloney Visual Studio Code extension and elevate your Cloney template repository management experience within the familiar Visual Studio Code environment.</p> <ol> <li> <p>Install the Extension: Visit the Cloney Extension on the Visual Studio Code Marketplace.</p> </li> <li> <p>Click Install to add the extension to your Visual Studio Code environment.</p> </li> <li> <p>Open a Cloney Template Repository and navigate to a Cloney template repository in your workspace.</p> </li> <li> <p>Leverage Enhanced Features: Enjoy the benefits of snippets, autocompletion, and streamlined Cloney command execution directly within VSCode.</p> </li> </ol>"},{"location":"creators/visual-studio-code-extension/#requirements","title":"Requirements","text":"<p>To use the Cloney Visual Studio Code extension, ensure that you have Cloney installed on your machine. If you haven't installed Cloney yet, the extension guides you to the installation page. You will also need Git in order to use some specific features.</p>"},{"location":"creators/functions/","title":"Introduction to Cloney Template Functions","text":"<p>Cloney Template Functions are custom functions provided by Cloney to enhance your template customization capabilities. These functions allow you to perform dynamic operations and generate content tailored to your specific needs within your Cloney templates.</p>"},{"location":"creators/functions/#what-are-cloney-template-functions","title":"What Are Cloney Template Functions?","text":"<p>Cloney Template Functions are predefined functions that you can use directly within your Cloney templates. These functions are designed to simplify common tasks and provide you with powerful tools for generating content, making decisions, and handling data.</p>"},{"location":"creators/functions/#how-to-use-cloney-template-functions","title":"How to Use Cloney Template Functions","text":"<p>To use Cloney Template Functions in your templates, you can call them directly within your template code. Each function has a specific purpose and may or may not require parameters. You can incorporate these functions into your templates to create dynamic and context-aware content.</p>"},{"location":"creators/functions/#available-cloney-template-functions","title":"Available Cloney Template Functions","text":"<p>Here is a list of some of the Cloney Template Functions available for your use:</p> <ul> <li><code>os</code>: Returns the user's operating system.</li> <li><code>arch</code>: Returns the user's operating system architecture.</li> <li><code>joinSingleQuote</code>: Joins the elements of a list with a specified separator and encloses them in single quotes.</li> <li><code>joinDoubleQuote</code>: Joins the elements of a list with a specified separator and encloses them in double quotes.</li> <li><code>toFile</code>: Writes the output of a template to a file.</li> </ul>"},{"location":"creators/functions/#sprig-functions","title":"Sprig Functions","text":"<p>Additionally, you can explore a wide range of custom functions provided by the Sprig library, which is integrated into Cloney's template engine. These functions can further expand your template capabilities.</p>"},{"location":"creators/functions/arch/","title":"<code>arch</code> Function","text":"<p>The <code>arch</code> function returns the user's operating system architecture.</p>"},{"location":"creators/functions/arch/#description","title":"Description","text":"<p>This function has no parameters and is useful for generating architecture-specific content in your Cloney templates.</p>"},{"location":"creators/functions/arch/#return-value","title":"Return Value","text":"<p>The <code>arch</code> function returns a string representing the user's operating system architecture.</p>"},{"location":"creators/functions/arch/#example","title":"Example","text":"<p>Here's an example of how to use the <code>arch</code> function in a Cloney template:</p> README.md<pre><code>To start the 'abc' service, run the following command:\n\n{{ if eq (arch) \"amd64\" }}\n    ./abc_amd64\n{{ else if eq (arch) \"arm64\" }}\n    ./abc_arm64\n{{ else }}\n    ./abc\n{{ end }}\n</code></pre> <p>This will generate content like:</p> README.md<pre><code>To start the 'abc' service, run the following command:\n\n./abc_amd64\n</code></pre> <p>Compatibility</p> <p>This function is available in Cloney <code>0.1.0</code> and later.</p>"},{"location":"creators/functions/joinDoubleQuote/","title":"<code>joinDoubleQuote</code> Function","text":"<p>The <code>joinDoubleQuote</code> function takes a list and a separator and returns a string with the list elements separated by the specified separator and enclosed in double quotes.</p>"},{"location":"creators/functions/joinDoubleQuote/#description","title":"Description","text":"<p>The <code>joinDoubleQuote</code> function is a useful utility for creating a formatted string by joining the elements of a list with a specified separator and enclosing them in double quotes. This is particularly handy when you need to generate text for various data serialization formats or configuration files where values need to be enclosed in double quotes.</p>"},{"location":"creators/functions/joinDoubleQuote/#parameters","title":"Parameters","text":"<ul> <li><code>list</code>: The list of elements that you want to join within double quotes.</li> <li><code>separator</code>: The string that should separate the elements within the double quotes.</li> </ul>"},{"location":"creators/functions/joinDoubleQuote/#return-value","title":"Return Value","text":"<p>The <code>joinDoubleQuote</code> function returns a string with the list elements joined together, separated by the specified separator, and enclosed in double quotes.</p>"},{"location":"creators/functions/joinDoubleQuote/#example","title":"Example","text":"<p>Here's an example of how to use the <code>joinDoubleQuote</code> function in a Cloney template:</p> config.json<pre><code>{\n    \"servers\": [\n        {{ joinDoubleQuote .servers \", \" }}\n    ]\n}\n</code></pre> <p>Suppose we have the following list of servers:</p> cloney-vars.yaml<pre><code>servers:\n  - server1\n  - server2\n  - server3\n</code></pre> <p>When used in the Cloney template, it will generate content like:</p> config.json<pre><code>{\n    \"servers\": [\n        \"server1\", \"server2\", \"server3\"\n    ]\n}\n</code></pre> <p>Compatibility</p> <p>This function is available in Cloney <code>1.0.0</code> and later.</p>"},{"location":"creators/functions/joinSingleQuote/","title":"<code>joinSingleQuote</code> Function","text":"<p>The <code>joinSingleQuote</code> function is similar to the <code>joinDoubleQuote</code> function, but it takes a list and a separator and returns a string with the list elements separated by the specified separator and enclosed in single quotes. This function is useful when you need to generate text for scripting languages or scenarios where single quotes are the preferred choice for string delimiters.</p>"},{"location":"creators/functions/joinSingleQuote/#parameters","title":"Parameters","text":"<ul> <li><code>list</code>: The list of elements that you want to join within single quotes.</li> <li><code>separator</code>: The string that should separate the elements within the single quotes.</li> </ul>"},{"location":"creators/functions/joinSingleQuote/#return-value","title":"Return Value","text":"<p>The <code>joinSingleQuote</code> function returns a string with the list elements joined together, separated by the specified separator, and enclosed in single quotes.</p>"},{"location":"creators/functions/joinSingleQuote/#example","title":"Example","text":"<p>Here's an example of how to use the <code>joinSingleQuote</code> function in a Cloney template:</p> script.sh<pre><code>#!/bin/bash\n\nservers=({{ joinSingleQuote .servers \" \" }})\n\nfor server in \"${servers[@]}\"; do\n    echo \"Processing server: $server\"\ndone\n</code></pre> <p>Suppose we have the following list of servers:</p> cloney-vars.yaml<pre><code>servers:\n  - server1\n  - server2\n  - server3\n</code></pre> <p>When used in the Cloney template, it will generate content like:</p> script.sh<pre><code>#!/bin/bash\n\nservers=('server1' 'server2' 'server3')\n\nfor server in \"${servers[@]}\"; do\n    echo \"Processing server: $server\"\ndone\n</code></pre> <p>Compatibility</p> <p>This function is available in Cloney <code>1.0.0</code> and later.</p>"},{"location":"creators/functions/os/","title":"<code>os</code> Function","text":"<p>The <code>os</code> function returns the user's operating system.</p>"},{"location":"creators/functions/os/#description","title":"Description","text":"<p>This function has no parameters and is useful for generating OS-specific content in your Cloney templates.</p>"},{"location":"creators/functions/os/#return-value","title":"Return Value","text":"<p>The <code>os</code> function returns a string representing the user's operating system.</p>"},{"location":"creators/functions/os/#example","title":"Example","text":"<p>Here's an example of how to use the <code>os</code> function in a Cloney template:</p> README.md<pre><code>To start the 'abc' service, run the following command:\n\n{{ if eq (os) \"windows\" }}\n    ./abc.exe\n{{ else }}\n    ./abc\n{{ end }}\n</code></pre> <p>This will generate content like:</p> README.md<pre><code>To start the 'abc' service, run the following command:\n\n./abc.exe\n</code></pre> <p>Compatibility</p> <p>This function is available in Cloney <code>0.1.0</code> and later.</p>"},{"location":"creators/functions/toFile/","title":"<code>toFile</code> Function","text":"<p>The <code>toFile</code> function allows you to write the output of a template to a file, enabling dynamic file generation based on your templates and data. This function is particularly powerful when you need to generate multiple files with varying content from a single template.</p>"},{"location":"creators/functions/toFile/#description","title":"Description","text":"<p>The <code>toFile</code> function takes three parameters:</p> <ol> <li> <p>Relative Path (String): The first parameter specifies the relative path where the file will be created. This path is relative to the directory of the current template file.</p> </li> <li> <p>Template Name (String): The second parameter is the name of a template containing the data that will be written to the file. This template defines the structure and content of the file.</p> </li> <li> <p>Template Data (Context): The third parameter is the template data or context that will be used for rendering the template. This data provides the necessary information and variables required by the template.</p> </li> </ol>"},{"location":"creators/functions/toFile/#usage","title":"Usage","text":"<p>Here's a basic example of using the <code>toFile</code> function within a Cloney template:</p> example-template.txt<pre><code>{{ toFile \"output/example-file.txt\" \"my-template\" . }}\n</code></pre> <p>In this example:</p> <ul> <li>The first parameter specifies that the file should be created at the relative path <code>\"output/example-file.txt\"</code>.</li> <li>The second parameter is the name of the template <code>\"my-template\"</code> that defines the content of the file.</li> <li>The third parameter (<code>.</code>) provides the template data or context needed for rendering the template.</li> </ul>"},{"location":"creators/functions/toFile/#example-scenario","title":"Example Scenario","text":"<p>Suppose you have a list of items, and you want to generate a separate file for each item. Here's how you can achieve this using the <code>toFile</code> function:</p> main-template.txt<pre><code>{{- define \"item-file-content\" -}}\nThe item is: {{ . }}\n{{- end -}}\n\n{{- range .items }}\n{{- $fileName := printf \"output/%s.txt\" . }}\n{{- toFile $fileName \"item-file-content\" . }}\n{{- end }}\n</code></pre> <p>In this example:</p> <ul> <li>The <code>item-file-content</code> is a template that defines the content for each file.</li> <li>The <code>range</code> block iterates through the list of items.</li> <li>The <code>$fileName</code> variable is dynamically created based on the current item's name.</li> <li>The <code>toFile</code> function is then used to generate a file at the specified path with the content from the template and the data from the current item.</li> </ul> <p>Compatibility</p> <p>This function is available in Cloney <code>0.1.0</code> and later.</p>"},{"location":"creators/go-template-tutorials/","title":"Go Templates Tutorials","text":"<p>Welcome to the Go Templates Tutorials in Cloney. This guide will help you understand and utilize the core concepts of Go templates within Cloney, empowering you to create dynamic and adaptable template repositories.</p>"},{"location":"creators/go-template-tutorials/#introduction","title":"Introduction","text":"<p>Cloney's template engine is powered by Go templates, which are used to create and customize the content of your template repositories. Go templates provide a flexible and powerful way to define and generate text-based content. This guide will take you through various aspects of Go templates, all of which are fundamental to working effectively within Cloney.</p>"},{"location":"creators/go-template-tutorials/#variables","title":"Variables","text":"<p>Learn how to create and use variables within your templates to store and manipulate data. Variables make your templates more dynamic and versatile. Check out the Variables tutorial to get started.</p>"},{"location":"creators/go-template-tutorials/#contexts","title":"Contexts","text":"<p>Understanding Go template contexts is crucial for creating dynamic templates. Discover the root context, local contexts, and how to access variables within different scopes. Explore the Contexts tutorial to dive deeper into this topic.</p>"},{"location":"creators/go-template-tutorials/#conditional-statements","title":"Conditional Statements","text":"<p>Create templates that react dynamically to various conditions. Use <code>if</code> and <code>else</code> statements to control content flow. Explore the Conditional Statements tutorial and make your templates adaptable.</p>"},{"location":"creators/go-template-tutorials/#loops-and-iterations","title":"Loops and Iterations","text":"<p>Use iterations to loop through lists and apply templates to each element. Learn about the <code>range</code> construct and how to make your templates more dynamic. The Loops and Iterations tutorial is your gateway to mastering this concept.</p>"},{"location":"creators/go-template-tutorials/#functions","title":"Functions","text":"<p>Enhance your template's functionality with built-in Go template functions. Perform operations, manipulate data, and generate dynamic content. Explore the Functions tutorial and expand your template capabilities.</p>"},{"location":"creators/go-template-tutorials/#hyphens","title":"Hyphens","text":"<p>Discover how to control whitespace and formatting within your templates using hyphens (<code>-</code>). By using leading and trailing hyphens, you can achieve precise rendering. Learn more in the Hyphens tutorial.</p>"},{"location":"creators/go-template-tutorials/conditional-statements/","title":"Go Templates: Conditional Statements","text":"<p>In Cloney template repositories, you can employ conditional statements to make your templates react dynamically to various conditions. These conditionals allow you to control the flow of your templates, showing or hiding content based on specific criteria.</p>"},{"location":"creators/go-template-tutorials/conditional-statements/#the-if-statement","title":"The <code>if</code> Statement","text":"<p>To use conditional statements in Go templates, follow these steps:</p> <ol> <li> <p>Choose a Condition: Begin by defining the condition you want to check. For example, you can check if a variable is equal to a specific value.</p> </li> <li> <p>Use the <code>if</code> Statement: Employ the <code>if</code> statement to initiate the conditional check. The basic syntax is as follows:</p> <pre><code>{{ if .condition }}\n    Content to display when the condition is true.\n{{ else }}\n    Content to display when the condition is false.\n{{ end }}\n</code></pre> <ul> <li><code>.condition</code> represents the expression or variable you want to evaluate.</li> <li>The content inside the <code>if</code> block will be displayed if the condition is true.</li> <li>The content inside the <code>else</code> block will be displayed if the condition is false.</li> </ul> </li> <li> <p>Execute Actions: Within the <code>if</code> and <code>else</code> blocks, you can execute actions or access data depending on the condition.</p> </li> </ol>"},{"location":"creators/go-template-tutorials/conditional-statements/#the-if-and-else-statements","title":"The <code>if</code> and <code>else</code> Statements","text":"<p>Here's an example of using the <code>if</code> and <code>else</code> statements to check if a variable equals a specific value:</p> <pre><code>{{ if eq .status \"active\" }}\n   This is an active item.\n{{ else }}\n   This item is not active.\n{{ end }}\n</code></pre> <p>In this example, we're checking the <code>status</code> variable to see if it's equal to the string <code>\"active\"</code>.</p>"},{"location":"creators/go-template-tutorials/conditional-statements/#the-else-if-statement","title":"The <code>else if</code> Statement","text":"<p>You can also use the <code>else if</code> statement to check multiple conditions in a structured manner. Here's how you can use it:</p> <pre><code>{{ if eq .status \"active\" }}\n   This is an active item.\n{{ else if eq .status \"inactive\" }}\n   This item is inactive.\n{{ else }}\n   The status is neither active nor inactive.\n{{ end }}\n</code></pre> <p>In this example, we're checking the <code>status</code> variable and providing different responses based on the possible values.</p>"},{"location":"creators/go-template-tutorials/conditional-statements/#multiple-conditions","title":"Multiple Conditions","text":"<p>You can also use multiple conditions by combining conditions using <code>or</code> and <code>and</code> operators, for example.</p> <p>Here's an example of combining conditions using the <code>or</code> operator:</p> <pre><code>{{ if or (eq .status \"active\") (eq .priority \"high\") }}\n   This item has a high priority or is active.\n{{ else }}\n   This item is not high priority and not active.\n{{ end }}\n</code></pre> <p>In this example, we're checking if the <code>status</code> is equal to <code>\"active\"</code> or the <code>priority</code> is equal to <code>\"high\"</code>.</p>"},{"location":"creators/go-template-tutorials/conditional-statements/#important-considerations","title":"Important Considerations","text":"<ul> <li>Go templates follow Go's comparison operators, such as <code>eq</code> for equality, <code>ne</code> for not equal, <code>lt</code> for less than, and <code>gt</code> for greater than.</li> </ul>"},{"location":"creators/go-template-tutorials/contexts/","title":"Go Templates: Contexts","text":"<p>In Cloney template repositories, understanding Go template contexts is essential to create dynamic and adaptable templates. Contexts determine the scope and availability of variables within your templates. This documentation will provide you with insights into the root context, local contexts, and how to navigate between them.</p>"},{"location":"creators/go-template-tutorials/contexts/#root-context","title":"Root Context","text":"<p>The root context in Cloney represents the top-level scope of your template. It contains global variables and user-provided variables, making it the starting point for template execution. Variables in the root context can be accessed directly using the <code>.</code> notation.</p>"},{"location":"creators/go-template-tutorials/contexts/#local-contexts","title":"Local Contexts","text":"<p>Local contexts are specific to a block or construct within your template. When you use control structures like <code>{{ range }}</code>, <code>{{ with }}</code>, or define reusable blocks with <code>{{ define }}</code>, you enter a local context. The variables available in these local contexts depend on the structure you're using.</p>"},{"location":"creators/go-template-tutorials/contexts/#accessing-variables","title":"Accessing Variables","text":"<p>In Go templates, you can access variables within the current context using the <code>.</code> (dot) notation. To navigate to the root context, you can use the <code>$</code> (dollar sign) symbol. Here's an example of how variable access works in Go templates:</p> <pre><code>Root-level variable: {{ .app_name }}\n\n{{ range .items }}\n    Local variable: {{ .name }}\n    Accessing root variable within local context: {{ $.app_name }}\n{{ end }}\n</code></pre> <p>In this example, <code>app_name</code> is a root-level variable, and <code>name</code> is a local variable. We use <code>.</code> to access the local variable and <code>$.app_name</code> to access the root-level variable from within a local context.</p> <p>Note: In a <code>define</code> structure, the root context's variables, such as <code>$.app_name</code>, are not accessible. That's because the <code>define</code> structure creates a new local context.</p>"},{"location":"creators/go-template-tutorials/functions/","title":"Go Templates: Functions","text":"<p>In Cloney template repositories, you can enhance the functionality and flexibility of your templates by utilizing built-in Go template functions. These functions allow you to perform various operations, manipulate data, and generate dynamic content within your templates.</p>"},{"location":"creators/go-template-tutorials/functions/#using-functions","title":"Using Functions","text":"<p>To use functions in Go templates, follow these steps:</p> <ol> <li> <p>Choose a Function: Begin by selecting the appropriate function for the task you want to perform. Cloney supports a wide range of Go template functions.</p> </li> <li> <p>Insert the Function: Use the chosen function by inserting it within double curly braces <code>{{ }}</code>. The function syntax consists of the function name and its arguments.</p> <pre><code>{{ function-name argument1 argument2 ... }}\n</code></pre> </li> <li> <p>Provide Arguments: Fill in the function's arguments with the necessary values or variables.</p> </li> </ol>"},{"location":"creators/go-template-tutorials/functions/#examples-utilizing-functions","title":"Examples: Utilizing Functions","text":"<p>Here are some examples of how you can use functions in your Cloney templates:</p>"},{"location":"creators/go-template-tutorials/functions/#uppercase-function","title":"Uppercase Function","text":"<p>You can use the <code>upper</code> function to convert text to uppercase:</p> <pre><code>{{ upper \"convert this to uppercase\" }}\n</code></pre> <p>In this example, the text \"convert this to uppercase\" is transformed into \"CONVERT THIS TO UPPERCASE.\"</p>"},{"location":"creators/go-template-tutorials/functions/#adding-function","title":"Adding Function","text":"<p>The <code>add</code> function allows you to perform addition on numbers:</p> <pre><code>5 + 8 is equal to: {{ add 5 3 }}\n</code></pre> <p>In this example, the function returns the result of 5 + 3, which is 8.</p>"},{"location":"creators/go-template-tutorials/functions/#repeating-strings","title":"Repeating Strings","text":"<p>With the <code>repeat</code> function, you can create repeated sequences of text:</p> <pre><code>{{ repeat \"Cloney \" 3 }}\n</code></pre> <p>In this case, the function generates \"Cloney Cloney Cloney \".</p>"},{"location":"creators/go-template-tutorials/functions/#important-considerations","title":"Important Considerations","text":"<ul> <li>Cloney provides a variety of built-in Go template functions. Explore the Cloney's custom functions for a list of custom functions specifically designed for Cloney templates. Additionally, you can refer to the Sprig functions documentation for an extensive list of custom functions provided by the Sprig library, which is included in Cloney's template engine. These functions can further expand your template capabilities.</li> </ul>"},{"location":"creators/go-template-tutorials/hyphens/","title":"Go Templates: Hyphens","text":"<p>In Go templates, you may have noticed the use of hyphens (<code>-</code>) in constructs like <code>{{- end -}}</code>. These hyphens serve specific purposes in template rendering, enabling you to control the whitespace and formatting of your output.</p> <p>Here's how hyphens are used in Go templates:</p>"},{"location":"creators/go-template-tutorials/hyphens/#leading-hyphens-","title":"Leading Hyphens (<code>{{- ...}}</code>)","text":"<p>Placing hyphens immediately after the opening curly brace (<code>{{</code>) trims any whitespace and newline characters that follow. This ensures that the content right after the opening brace is rendered immediately, without any leading whitespace.</p> <p>Example:</p> <pre><code>Hello, \n{{- \" this will have no leading whitespace.\" }}\n</code></pre> <p>Output:</p> <pre><code>Hello, this will have no leading whitespace.\n</code></pre> <p>In this example, the use of leading hyphens ensures that the text immediately follows the opening curly brace without any leading whitespace.</p>"},{"location":"creators/go-template-tutorials/hyphens/#trailing-hyphens-","title":"Trailing Hyphens (<code>{{ ... -}}</code>)","text":"<p>When hyphens are placed just before the closing curly brace (<code>}}</code>), any trailing whitespace and newline characters are trimmed. This prevents extra whitespace from being added after the content enclosed by the template tags.</p> <p>Example:</p> <pre><code>{{ \"This will have no trailing whitespace. \" -}}\nGoodbye!\n</code></pre> <p>Output:</p> <pre><code>This will have no trailing whitespace. Goodbye!\n</code></pre> <p>Here, the trailing hyphens ensure that there's no trailing whitespace after the content enclosed by the template tags.</p>"},{"location":"creators/go-template-tutorials/hyphens/#both-leading-and-trailing-hyphens-","title":"Both Leading and Trailing Hyphens (<code>{{- ... -}}</code>)","text":"<p>Using hyphens on both sides trims both leading and trailing whitespace, resulting in tight control over the spacing and formatting of your content.</p> <p>Example:</p> <pre><code>Hello, \n{{- \" this will have no trailing whitespace. \" -}}\nGoodbye!\n</code></pre> <p>Output:</p> <pre><code>Hello, this will have no trailing whitespace. Goodbye!\n</code></pre> <p>With both leading and trailing hyphens, the content is rendered without any unnecessary whitespace.</p>"},{"location":"creators/go-template-tutorials/loops-and-iterations/","title":"Go Templates: Loops and Iterations","text":"<p>In Cloney template repositories, you can perform iterations using the <code>range</code> construct to loop through slices, arrays, and maps. This enables you to process each element of a collection or iterate through a sequence of values.</p>"},{"location":"creators/go-template-tutorials/loops-and-iterations/#how-to-use-range-for-iteration","title":"How to Use Range for Iteration","text":"<p>To use the <code>range</code> construct for iteration, follow these steps:</p> <ol> <li> <p>Select a Collection: Choose a collection data structure like a slice, array, or map that you want to iterate over. You'll specify the collection to be iterated using the <code>range</code> construct.</p> </li> <li> <p>Use the Range Construct: Employ the <code>range</code> construct to initiate the iteration. The basic syntax is as follows:</p> <pre><code>{{ range $index, $element := .myCollection }}\n   {{ $index }}: {{ $element }}\n{{ end }}\n</code></pre> <ul> <li><code>$index</code> is an optional variable that holds the index of the current element.</li> <li><code>$element</code> is the variable that represents the current element in the collection.</li> </ul> <p>Alternatively, you can simplify the syntax by directly iterating over a list:</p> <pre><code>{{ range .myCollection }}\n   Item: {{ . }}\n{{ end }}\n</code></pre> </li> <li> <p>Perform Actions: Within the <code>range</code> block, you can execute actions or access data related to each element. For example:</p> <pre><code>{{ range $index, $element := .myCollection }}\n   Item {{ $index }}: {{ $element.name }}\n{{ end }}\n</code></pre> <p>In this example, we're accessing the <code>name</code> property of each element within the collection.</p> </li> </ol>"},{"location":"creators/go-template-tutorials/loops-and-iterations/#example-1-iterating-through-a-slice","title":"Example 1: Iterating Through a Slice","text":"<p>Here's an example of iterating through a slice of items:</p> <pre><code>{{ range $item := .items }}\n   {{ $item }}\n{{ end }}\n</code></pre> <p>In this case, we're using a slice named <code>items</code> and printing each item's value.</p>"},{"location":"creators/go-template-tutorials/loops-and-iterations/#example-2-iterating-through-a-map","title":"Example 2: Iterating Through a Map","text":"<p>You can also iterate through a map using the <code>range</code> construct:</p> <pre><code>{{ range $key, $value := .data }}\n   Key: {{ $key }}, Value: {{ $value }}\n{{ end }}\n</code></pre> <p>In this example, we're iterating through a map named <code>data</code> and displaying its key-value pairs.</p>"},{"location":"creators/go-template-tutorials/loops-and-iterations/#important-considerations","title":"Important Considerations","text":"<ul> <li>The <code>$index</code> and <code>$element</code> variables are optional. You can choose different variable names for more descriptive context.</li> <li>To loop through a map, Cloney preserves the order in which key-value pairs were defined.</li> </ul>"},{"location":"creators/go-template-tutorials/variables/","title":"Go Templates: Variables","text":"<p>In Cloney template repositories, you can create and use variables within your templates to store and manipulate data. These variables are specific to your template and can help you make your templates more dynamic.</p>"},{"location":"creators/go-template-tutorials/variables/#how-to-create-variables","title":"How to Create Variables","text":"<p>To create a variable in a Go template, follow these steps:</p> <ol> <li> <p>Choose a Descriptive Name: Start by selecting a descriptive name for your variable. The name should reflect the data or information it represents.</p> </li> <li> <p>Define the Variable: Use the following syntax to define the variable and assign it a value:</p> <pre><code>{{ $variableName := \"Variable Value\" }}\n</code></pre> <p>In this example, we've created a template-specific variable named <code>variableName</code> and assigned it the value <code>\"Variable Value\"</code>.</p> <p>Note: It's important not to confuse variables defined in your template (created using <code>$</code>) with user-provided variables (accessed as <code>.variableName</code>) passed during the cloning process.</p> </li> <li> <p>Use the Variable: You can use your defined variable anywhere within your template using <code>{{ $variableName }}</code>. For instance:</p> <pre><code>Welcome to {{ $variableName }} Cloney Template!\n</code></pre> <p>In this example, we've inserted the variable's value within the template to create dynamic content.</p> </li> </ol>"},{"location":"creators/go-template-tutorials/variables/#variable-naming-rules","title":"Variable Naming Rules","text":"<p>When naming variables in Go templates, keep these rules in mind:</p> <ul> <li>Variable names must start with a letter and can only contain letters, numbers, and underscores.</li> <li>Variable names are case-sensitive. This means that <code>myVar</code> and <code>myvar</code> are considered different variables.</li> </ul>"},{"location":"creators/go-template-tutorials/variables/#variable-scope","title":"Variable Scope","text":"<p>Variables in Go templates are block-scoped, meaning they are available only within the block in which they are defined. If you define a variable within a control structure like <code>{{ range }}</code> or <code>{{ with }}</code>, it is accessible only within that specific block.</p>"},{"location":"partials/commands/clone/_clone-0.1.0-above/","title":"clone 0.1.0 above","text":"<p>Clone a template repository using the <code>clone</code> command. This command allows you to clone a Cloney Template Repository while providing the option to customize it with specific variable values.</p> <p>By default, this command searches for a file named <code>.cloney-vars.yaml</code> in your current directory for variable values. However, with the <code>--variables</code> flag you can specify a different file or pass the variables inline as YAML.</p>"},{"location":"partials/commands/clone/_clone-0.1.0-above/#flags","title":"Flags","text":"Flag Description Default Value <code>-b, --branch string</code> Specifies the Git branch. <code>\"main\"</code> <code>-o, --output string</code> Specifies the path to clone the repository to. <code>-t, --tag string</code> Specifies the Git tag. <code>-k, --token string</code> Specifies the Git token, if referencing a private Git repository. <code>-v, --variables string</code> Specifies the path to a template variables file or raw YAML. <code>\".cloney-vars.yaml\"</code>"},{"location":"partials/commands/clone/_clone-0.1.0-above/#example-1-basic-cloning","title":"Example 1: Basic Cloning","text":"<p>Clone a template repository without specifying a variables file:</p> <pre><code>cloney clone https://github.com/username/repository.git\n</code></pre>"},{"location":"partials/commands/clone/_clone-0.1.0-above/#example-2-using-a-custom-variables-file","title":"Example 2: Using a Custom Variables File","text":"<p>Clone a template repository and specify a different variables file (e.g., <code>variables.yaml</code>):</p> <pre><code>cloney clone https://github.com/username/repository.git -v variables.yaml\n</code></pre>"},{"location":"partials/commands/clone/_clone-0.1.0-above/#example-3-inline-variables","title":"Example 3: Inline Variables","text":"<p>Clone a template repository with inline variable values:</p> <pre><code>cloney clone https://github.com/username/repository.git -v '{ var1: value, var2: value }'\n</code></pre>"},{"location":"partials/commands/docs/_docs-0.2.0-above/","title":"docs 0.2.0 above","text":"<p>The <code>docs</code> command opens the Cloney documentation in your browser.</p>"},{"location":"partials/commands/docs/_docs-0.2.0-above/#example-1-basic-documentation-open","title":"Example 1: Basic Documentation Open","text":"<p>Open the Cloney documentation in your browser:</p> <pre><code>cloney docs\n</code></pre>"},{"location":"partials/commands/dry-run/_dry-run-0.1.0-above/","title":"dry run 0.1.0 above","text":"<p>The <code>dry-run</code> command is used for debugging purposes, allowing you to inspect the output generated by your Cloney Template Repository with the provided variables. This command helps you verify variable replacement and check for errors in the cloning process.</p> <p>By default, this command searches for a file named <code>.cloney-vars.yaml</code> in your current directory for variable values. However, with the <code>--variables</code> flag you can specify a different file or pass the variables inline as YAML.</p>"},{"location":"partials/commands/dry-run/_dry-run-0.1.0-above/#flags","title":"Flags","text":"Flag Description Default Value <code>-o, --output string</code> Specifies the path to output the filled template files. <code>\"cloney-dry-run-results\"</code> <code>-i, --output-in-terminal</code> Outputs the filled template file contents in the terminal instead of creating the files. <code>false</code> <code>-v, --variables string</code> Specifies the path to a template variables file or raw YAML. <code>\".cloney-vars.yaml\"</code>"},{"location":"partials/commands/dry-run/_dry-run-0.1.0-above/#example-1-using-default-variables-file","title":"Example 1: Using Default Variables File","text":"<p>Run a dry-run on your local template repository using the default variables file, <code>.cloney-vars.yaml</code>:</p> <pre><code>cloney dry-run\n</code></pre>"},{"location":"partials/commands/dry-run/_dry-run-0.1.0-above/#example-2-using-a-custom-variables-file","title":"Example 2: Using a Custom Variables File","text":"<p>Specify a different variables file (e.g., <code>variables.yaml</code>) for the dry-run:</p> <pre><code>cloney dry-run -v variables.yaml\n</code></pre>"},{"location":"partials/commands/dry-run/_dry-run-0.1.0-above/#example-3-inline-variables","title":"Example 3: Inline Variables","text":"<p>Run a dry-run with inline variable values:</p> <pre><code>cloney dry-run -v '{ var1: value, var2: value }'\n</code></pre>"},{"location":"partials/commands/dry-run/_dry-run-0.1.0-above/#example-4-dry-run-from-local-path","title":"Example 4: Dry-run from Local Path","text":"<p>Run a dry-run on a template repository from a local path:</p> <pre><code>cloney dry-run ./path/to/my/template -v variables.yaml\n</code></pre>"},{"location":"partials/commands/dry-run/_dry-run-1.0.0-above/","title":"dry run 1.0.0 above","text":"<p>The <code>dry-run</code> command is used for debugging purposes, allowing you to inspect the output generated by your Cloney Template Repository with the provided variables. This command helps you verify variable replacement and check for errors in the cloning process.</p> <p>By default, this command searches for a file named <code>.cloney-vars.yaml</code> in your current directory for variable values. However, with the <code>--variables</code> flag you can specify a different file or pass the variables inline as YAML.</p>"},{"location":"partials/commands/dry-run/_dry-run-1.0.0-above/#flags","title":"Flags","text":"Flag Description Default Value <code>-r, --hot-reload</code> Enable hot reload mode. <code>false</code> <code>-o, --output string</code> Specifies the path to output the filled template files. <code>\"cloney-dry-run-results\"</code> <code>-i, --output-in-terminal</code> Outputs the filled template file contents in the terminal instead of creating the files. <code>false</code> <code>-v, --variables string</code> Specifies the path to a template variables file or raw YAML. <code>\".cloney-vars.yaml\"</code>"},{"location":"partials/commands/dry-run/_dry-run-1.0.0-above/#example-1-using-default-variables-file","title":"Example 1: Using Default Variables File","text":"<p>Run a dry-run on your local template repository using the default variables file, <code>.cloney-vars.yaml</code>:</p> <pre><code>cloney dry-run\n</code></pre>"},{"location":"partials/commands/dry-run/_dry-run-1.0.0-above/#example-2-using-a-custom-variables-file","title":"Example 2: Using a Custom Variables File","text":"<p>Specify a different variables file (e.g., <code>variables.yaml</code>) for the dry-run:</p> <pre><code>cloney dry-run -v variables.yaml\n</code></pre>"},{"location":"partials/commands/dry-run/_dry-run-1.0.0-above/#example-3-inline-variables","title":"Example 3: Inline Variables","text":"<p>Run a dry-run with inline variable values:</p> <pre><code>cloney dry-run -v '{ var1: value, var2: value }'\n</code></pre>"},{"location":"partials/commands/dry-run/_dry-run-1.0.0-above/#example-4-dry-run-from-local-path","title":"Example 4: Dry-run from Local Path","text":"<p>Run a dry-run on a template repository from a local path:</p> <pre><code>cloney dry-run ./path/to/my/template -v variables.yaml\n</code></pre>"},{"location":"partials/commands/dry-run/_dry-run-1.0.0-above/#example-5-hot-reload-mode","title":"Example 5: Hot Reload Mode","text":"<p>Run a dry-run on a template repository with hot reload mode enabled. This mode will watch for changes in the template repository and automatically re-run the <code>dry-run</code> command for you:</p> <pre><code>cloney dry-run -v variables.yaml -r\n</code></pre>"},{"location":"partials/commands/info/_info-0.1.0-above/","title":"info 0.1.0 above","text":"<p>Get information about a Cloney template repository using the <code>info</code> command. This command provides details about a Cloney template repository, including its name, description, and variables.</p> <p>The <code>info</code> command can retrieve information from both local and remote template repositories. By default, it retrieves information from the current directory, assuming it is a template repository.</p>"},{"location":"partials/commands/info/_info-0.1.0-above/#flags","title":"Flags","text":"Flag Description Default Value <code>-b, --branch string</code> Specifies the Git branch when referencing a git repository. <code>\"main\"</code> <code>-t, --tag string</code> Specifies the Git tag when referencing a git repository. <code>-k, --token string</code> Specifies the Git token when referencing a private git repository."},{"location":"partials/commands/info/_info-0.1.0-above/#example-1-basic-info-retrieval","title":"Example 1: Basic Info Retrieval","text":"<p>Retrieve information about the current template repository (assuming it is a template repository):</p> <pre><code>cloney info\n</code></pre>"},{"location":"partials/commands/info/_info-0.1.0-above/#example-2-info-from-local-path","title":"Example 2: Info from Local Path","text":"<p>Retrieve information about a template repository from a local path:</p> <pre><code>cloney info ./path/to/my/template\n</code></pre>"},{"location":"partials/commands/info/_info-0.1.0-above/#example-3-info-from-remote-repository-url","title":"Example 3: Info from Remote Repository URL","text":"<p>Retrieve information about a template repository from a remote repository URL:</p> <pre><code>cloney info https://github.com/username/repository.git\n</code></pre>"},{"location":"partials/commands/start/_start-0.1.0-above/","title":"start 0.1.0 above","text":"<p>Start a new Cloney template repository using the <code>start</code> command. This command creates a directory with all the necessary files to begin a new Cloney template repository.</p>"},{"location":"partials/commands/start/_start-0.1.0-above/#flags","title":"Flags","text":"Flag Description Default Value <code>-a, --authors stringArray</code> Specifies the authors of the template repository. <code>[]</code> <code>-d, --description string</code> Specifies the description of the template repository. <code>\"A Cloney template repository\"</code> <code>-l, --license string</code> Specifies the license of the template repository. <code>\"MIT\"</code> <code>-n, --name string</code> Specifies the name of the template repository. <code>\"cloney-template\"</code> <code>-y, --non-interactive</code> Skip questions and use default values and/or flags. <code>false</code> <code>-o, --output string</code> Specifies the directory where the template repository will be saved. <code>\"cloney-template\"</code>"},{"location":"partials/commands/start/_start-0.1.0-above/#example-1-basic-template-creation","title":"Example 1: Basic Template Creation","text":"<p>Start a new template repository with interactive prompts:</p> <pre><code>cloney start\n</code></pre>"},{"location":"partials/commands/start/_start-0.1.0-above/#example-2-non-interactive-mode","title":"Example 2: Non-Interactive Mode","text":"<p>Start a new template repository with default values and skip prompts:</p> <pre><code>cloney start -y\n</code></pre>"},{"location":"partials/commands/validate/_validate-0.1.0-above/","title":"validate 0.1.0 above","text":"<p>Validate your Cloney template repository using the <code>validate</code> command. This command checks whether your Cloney template repository is valid by verifying the presence of the <code>.cloney.yaml</code> metadata file and checking if it is valid.</p>"},{"location":"partials/commands/validate/_validate-0.1.0-above/#example-1-basic-validation","title":"Example 1: Basic Validation","text":"<p>Validate the current template repository (assuming it is a template repository):</p> <pre><code>cloney validate\n</code></pre>"},{"location":"partials/commands/validate/_validate-0.1.0-above/#example-2-validation-from-local-path","title":"Example 2: Validation from Local Path","text":"<p>Validate a template repository from a local path:</p> <pre><code>cloney validate ./path/to/my/template\n</code></pre>"},{"location":"partials/commands/version/_version-0.1.0-above/","title":"version 0.1.0 above","text":"<p>The <code>version</code> command in Cloney allows you to check the current version of the Cloney CLI tool.</p>"},{"location":"partials/commands/version/_version-0.1.0-above/#example-1-basic-version-check","title":"Example 1: Basic Version Check","text":"<p>Check the current version of Cloney:</p> <pre><code>cloney version\n</code></pre>"},{"location":"partials/downloads/linux-macos/_1.1.0/","title":"1.1.0","text":"<pre><code>curl -sSL \"https://raw.githubusercontent.com/ArthurSudbrackIbarra/cloney/1.1.0/installation/install.sh\" | sudo bash\n</code></pre> <p>Compatibility</p> <p>This version of Cloney is compatible with the following <code>.cloney.yaml</code> manifest versions: <code>v1</code>.</p>"},{"location":"partials/downloads/windows/_1.1.0/","title":"1.1.0","text":"Operating System Architecture Download Link Windows amd64 Download Latest (1.1.0) arm64 Download Latest (1.1.0)  !!!info \"Compatibility\"     This version of Cloney is compatible with the following [`.cloney.yaml`](creators/cloney-metadata-file.md) manifest versions: `v1`."},{"location":"partials/manifests/_v1/","title":"v1","text":".cloney.yaml<pre><code>manifest_version: v1\n\nname: Bank Site\ndescription: A template to create a site for a bank.\nauthors:\n  - Chico Buarque\n  - Freddie Mercury\n  - John Lennon\nlicense: MIT\ntemplate_version: \"1.1.0\"\n\nconfiguration:\n  ignore_paths:\n    - development/*.html\n    - images/*.jpg\n\nvariables:\n  - name: app_name\n    description: The name of your application.\n    default: my_app\n    example: my_app\n\n  - name: enable_https\n    description: Wheter to enable HTTPS or not.\n    example: true\n\n  - name: currencies\n    description: List of currencies to use.\n    example:\n      - Real\n      - US Dollar\n      - Yen\n</code></pre> <p>manifest_version: The version of the Cloney manifest file used in the template, ensuring compatibility with different versions of Cloney.</p> <p>name: The name of your template, providing a clear identifier for users.</p> <p>description: A brief but informative description of your template's purpose and functionality.</p> <p>authors: A list of contributors or creators of the template, acknowledging their role in its development.</p> <p>license: The licensing information for your template, specifying how others can use and distribute it.</p> <p>template_version: The version number of your template, allowing users to identify different releases.</p> <p>configuration: A section that allows you to configure some optional aspects of your template.</p> <p>variables: A list of variables that users can customize during the cloning process.</p>"},{"location":"partials/manifests/_v1/#template-configuration","title":"Template Configuration","text":"<p>The <code>.cloney.yaml</code> metadata file also allows you to configure some aspects of your template. These configurations are optional and can be omitted if you don't require them.</p> <p>Ignore Paths: This configuration allows you to specify a list of paths to ignore when cloning the template. This is useful for excluding files that are not relevant to the template's customization process.</p>"},{"location":"partials/manifests/_v1/#template-variables","title":"Template Variables","text":"<p>Within the <code>.cloney.yaml</code> metadata file, Cloney allows you to define variables that users can customize during the cloning process. These variables play a central role in enabling dynamic template creation, ensuring that users can tailor templates to their specific requirements.</p> <p>Name: Assign a unique identifier to each variable, making it easy for users to reference and customize.</p> <p>Description: Provide a clear and concise description of each variable's purpose. These descriptions guide users in understanding how each variable affects the template.</p> <p>Default (Optional): Specify a default value for each variable. This value is used when a user doesn't provide a custom value during the cloning process. If this field is omitted, Cloney assumes that the variable is mandatory and must be informed by the user.</p> <p>Example Value: Every variable must include an example value that demonstrates how it should be formatted and used. This example serves as a practical reference for users, helping them correctly configure variables within their customized templates.</p> <p>Validate (Optional): This parameter determines whether the variable's value should undergo validation when it is cloned. By default, this setting is enabled (<code>true</code>). Although not recommended, you have the option to disable validation by setting this field to <code>false</code>. Disabling validation can be particularly beneficial for variables with dynamic characteristics, such as variables that may assume various types or maps with dynamically changing keys.</p>"},{"location":"users/","title":"User's Path","text":"<p>If you're looking to use existing Cloney Template Repositories created by others, you're in the right place. Cloney simplifies the process of leveraging templates tailored to various use cases and customizing them to meet your specific project requirements. Explore the following section to get started:</p> <ul> <li> <p>Cloning Your First Template Repository</p> <p>Learn how to clone your first Cloney template repository and customize it to suit your project requirements.</p> <p> Cloning Your First Template Repository</p> </li> <li> <p>Authentication and Private Repositories</p> <p>Discover how to work with private Git using Cloney.</p> <p> Authentication and Private Repositories</p> </li> <li> <p>Modularizing Repositories</p> <p>Discover how to modularize your Git repositories with Cloney, enabling you to combine multiple template repositories into a single, well-structured directory.</p> <p> Modularizing Repositories</p> </li> </ul>"},{"location":"users/authentication-and-private-repositories/","title":"Authentication and Private Repositories","text":"<p>When working with private Git repositories in Cloney, you have three available authentication methods. Each method is suitable for different use cases and security levels.</p> No Explicit Token (Recommended) Token Flag (Not Recommended) Environment Variables"},{"location":"users/authentication-and-private-repositories/#cloning-the-private-repository-and-using-cloney-dry-run","title":"Cloning the Private Repository and Using <code>cloney dry-run</code>","text":"<p>The recommended and more secure approach is to clone the private repository manually using Git and then use the <code>dry-run</code> command to apply Cloney's customizations without the need for explicit token authentication. This method is the recommended and secure way to work with private Git repositories in Cloney, as it leverages your existing access to the repository through Git.</p> <ol> <li> <p>Clone the private repository using Git:</p> <pre><code># Assuming you have access to the private repository.\ngit clone https://github.com/username/private-repository.git\n</code></pre> </li> <li> <p>Run the <code>cloney dry-run</code> command to apply Cloney's customizations:</p> <pre><code>cloney dry-run ./private-repository --output results\n</code></pre> <p>This command will apply Cloney's customizations to the <code>private-repository</code> directory and output the results to the <code>results</code> directory.</p> </li> </ol>"},{"location":"users/authentication-and-private-repositories/#using-the-k-token-flag","title":"Using the <code>-k, --token</code> Flag","text":"<p>Although not recommended, you can pass your Git token directly to Cloney using the <code>-k</code> or <code>--token</code> flag when running Cloney commands. Here's how to use it:</p> <pre><code># Clone command.\ncloney clone https://github.com/username/private-repo.git --token your-git-token\n\n# Info command.\ncloney info https://github.com/username/private-repo.git --token your-git-token\n</code></pre> <p>Replace <code>your-git-token</code> with your actual Git token. This method is suitable for one-time authentication within a single command.</p>"},{"location":"users/authentication-and-private-repositories/#using-the-cloney_git_token-environment-variable-linux-and-macos-only","title":"Using the <code>CLONEY_GIT_TOKEN</code> Environment Variable (Linux and macOS Only)","text":"<p>For Linux and macOS systems, you can set the <code>CLONEY_GIT_TOKEN</code> environment variable to specify your Git token once and use it across multiple Cloney commands without having to provide it every time.</p> <pre><code>export CLONEY_GIT_TOKEN=your-git-token\n</code></pre> <p>After setting the environment variable, you can run Cloney commands without the need to pass the token explicitly.</p>"},{"location":"users/cloning-your-first-template-repository/","title":"Cloning Your First Template Repository","text":"<p>Cloney makes it easy to get started with template repositories and customize them to suit your needs. Let's walk through the process of cloning your first Cloney template repository.</p>"},{"location":"users/cloning-your-first-template-repository/#step-1-choose-a-cloney-template-repository","title":"Step 1: Choose a Cloney Template Repository","text":"<p>Start by selecting a Cloney template repository that matches your project requirements. You can find Cloney template repositories on platforms like GitHub, GitLab, or Bitbucket.</p>"},{"location":"users/cloning-your-first-template-repository/#step-2-create-a-yaml-variables-file","title":"Step 2: Create a YAML Variables File","text":"<p>If the Cloney template repository you've chosen includes variables that you'd like to customize, you can create a YAML variables file. This file allows you to define custom values for variables specified in the template repository's <code>.cloney.yaml</code> metadata file. Here's an example:</p> .cloney-vars.yaml<pre><code>app_name: My App\nenable_https: true\ncurrencies:\n  - Real\n  - US Dollar\n  - Yen\n</code></pre> <p>In this example, we've customized variables like <code>app_name</code>, <code>enable_https</code>, and <code>currencies</code> to match our project's requirements.</p>"},{"location":"users/cloning-your-first-template-repository/#step-3-clone-the-template-repository","title":"Step 3: Clone the Template Repository","text":"<p>Use the Cloney Command-Line Interface (CLI) to clone the template repository and, if needed, apply your custom variables. Here's how to do it:</p> <pre><code>cloney clone https://github.com/username/repository.git --variables your-variables-file.yaml\n</code></pre> <ul> <li>Replace <code>https://github.com/username/repository.git</code> with the URL of the Cloney template repository you want to clone.</li> <li>Use <code>--variables your-variables-file.yaml</code> to specify the path to your YAML variables file if you've created one.</li> </ul> <p>By running this command, Cloney will clone the template repository and, if provided, apply the custom values from your YAML variables file. This ensures that your generated project reflects your specific configurations and requirements.</p>"},{"location":"users/modularizing-repositories/","title":"Cloney's Modularization: Building Your Project Block by Block","text":"<p>Cloney offers a practical approach to modularizing your Git repositories, enabling you to create well-structured projects by joining multiple template repositories into a single, organized directory, just like LEGO blocks! This approach promotes efficient template reuse and effective project management. In this documentation, we'll explore how Cloney's modularization capabilities can simplify your workflow.</p>"},{"location":"users/modularizing-repositories/#the-modularization-workflow","title":"The Modularization Workflow","text":"<p>To modularize a project with Cloney, follow these straightforward steps:</p>"},{"location":"users/modularizing-repositories/#1-create-a-project-directory","title":"1. Create a Project Directory","text":"<p>Begin by creating the root directory for your project. This directory will serve as the location for all the modules you intend to include.</p> <pre><code>mkdir my-project\ncd my-project\n</code></pre>"},{"location":"users/modularizing-repositories/#2-clone-template-repositories","title":"2. Clone Template Repositories","text":"<p>Utilize the <code>clone</code> command to clone template repositories into your project directory. For instance, let's say you need both a backend and a frontend for your project:</p> <pre><code># Clone a Java REST API template repository into the 'api' directory.\ncloney clone https://github.com/username/java-rest-api -v api-vars.yaml -o api\n\n# Clone a React frontend template repository into the 'frontend' directory.\ncloney clone https://gitlab.com/username/react-boilerplate -v front-vars.yaml -o frontend\n</code></pre> <p>In this example, we've cloned a Java REST API template repository into the <code>api</code> directory and a React frontend template repository into the <code>frontend</code> directory. These template repositories are just fictitious examples, but you can use any template repositories you'd like.</p> <p>When cloning repositories with Cloney, the hidden <code>.git</code> folder from the cloned template repositories is not included. This ensures that everything remains within a single repository, and you won't have multiple <code>.git</code> directories to manage.</p>"},{"location":"users/modularizing-repositories/#3-module-organization","title":"3. Module Organization","text":"<p>You now have a series of modules within your project directory, each representing a specific part of your project. Organize these modules according to your project's structure and requirements.</p> <pre><code>my-project/\n  \u251c\u2500\u2500 README.md (Project README)\n  \u251c\u2500\u2500 api/\n  \u2502   \u251c\u2500\u2500 ... (REST API files and directories)\n  \u251c\u2500\u2500 frontend/\n  \u2502   \u251c\u2500\u2500 ... (React frontend files and directories)\n  \u2514\u2500\u2500 ... (Additional modules as needed)\n</code></pre> <p>With Cloney's modularization, you can efficiently build your project by incorporating components from various template repositories, ensuring a well-organized and productive development process.</p>"}]}