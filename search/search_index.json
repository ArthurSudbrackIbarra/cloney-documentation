{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Cloney Official Documentation","text":"<p>Have you ever found yourself in the situation where you discover a fantastic template Git repository on GitHub, only to realize that it doesn't quite fit your unique project requirements? You're not alone. Traditional Git templates often leave you with the burden of customizing every detail manually, which can be time-consuming and error-prone. This is where Cloney comes to the rescue.</p> <p></p> <p> </p> <p></p>"},{"location":"#the-pain-of-manual-adjustments","title":"The Pain of Manual Adjustments","text":"<p>Picture this: you stumble upon a promising template Git repository that could kickstart your project. Excited, you fork the repository, but soon, you realize it needs extensive adjustments. You have to replace placeholder values, tweak configurations, and adapt the code to match your project's specifications.</p> <p>This process can be both frustrating and error-prone. Manually searching and replacing values throughout the codebase can lead to mistakes and inconsistencies. What if you could automate this entire customization process and have a template repository that adapts itself to your needs effortlessly? That's precisely what Cloney is designed to do.</p>"},{"location":"#introducing-cloney-template-repositories","title":"Introducing Cloney Template Repositories","text":"<p>Cloney Template Repositories are the heart of Cloney's innovative approach. These repositories are enriched with a special <code>.cloney.yaml</code> metadata file that contains information about the template repository. This metadata file defines variables and configurations, making the template adaptable to various use cases.</p> <p>With Cloney, you no longer need to manually tweak code, search for placeholders, or worry about consistency. Instead, you can:</p> <ul> <li> <p>Define variables within the <code>.cloney.yaml</code> file, allowing you to customize different aspects of the template, such as project names, descriptions, and more.</p> </li> <li> <p>Use Go templates, a powerful and flexible templating language, to dynamically generate files and directories based on your provided variables.</p> </li> <li> <p>Focus on your project's unique requirements and let Cloney handle the repetitive and error-prone customization tasks.</p> </li> </ul> <p>Cloney's goal is to streamline the process of utilizing Git template repositories, enabling you to create projects faster and with greater accuracy. Whether you're a developer looking to bootstrap a new project or a maintainer of template repositories, Cloney has you covered.</p>"},{"location":"#key-features-of-cloney","title":"Key Features of Cloney","text":"<ul> <li> <p>Dynamic Template Customization: Customize templates by defining variables and leveraging Go templates for dynamic content generation.</p> </li> <li> <p>Automation: Eliminate the need for manual adjustments and repetitive tasks when setting up projects based on templates.</p> </li> <li> <p>Consistency: Ensure consistency and reduce errors across projects derived from Cloney Template Repositories.</p> </li> <li> <p>Flexibility: Adapt templates to a wide range of use cases, from code projects to documentation and beyond.</p> </li> <li> <p>Community: Join a growing community of developers and template maintainers who share and collaborate on Cloney Template Repositories.</p> </li> </ul>"},{"location":"#getting-started-with-cloney","title":"Getting Started with Cloney","text":"<p>Now that you have a glimpse of what Cloney can do, it's time to dive deeper into how to use it effectively. Head over to the Getting Started guide to set up Cloney and begin using it for your Git projects.</p>"},{"location":"cloney-cli/","title":"Cloney Command-Line Interface (CLI)","text":"<p>The Cloney Command-Line Interface (CLI) is the tool you use to interact with Cloney Template Repositories. It offers a set of straightforward commands that enable you to manage, customize, and work with Cloney templates.</p>"},{"location":"cloney-cli/#start-command","title":"Start Command","text":"<p>The <code>cloney start</code> command allows you to create a new Cloney Template Repository in the current directory. This command initializes the repository and prepares it for use as a Cloney template.</p> <pre><code>cloney start\n</code></pre> <p></p>"},{"location":"cloney-cli/#info-command","title":"Info Command","text":"<p>The <code>cloney info</code> command provides information about a Cloney Template Repository. You can use it to retrieve details about a template repository in various ways:</p> <ul> <li>In the current directory:</li> </ul> <pre><code>cloney info\n</code></pre> <ul> <li>At a specific local path:</li> </ul> <pre><code>cloney info /path/to/local/repository\n</code></pre> <ul> <li>Using a remote URL:</li> </ul> <pre><code>cloney info https://github.com/username/template-repo.git\n</code></pre> <p></p>"},{"location":"cloney-cli/#clone-command","title":"Clone Command","text":"<p>The <code>cloney clone</code> command allows you to clone a Cloney Template Repository with custom variable values. You can customize the cloning process by providing a variables file (e.g., <code>my-vars.yaml</code>) or specifying variables inline.</p> <ul> <li>Using a variables file:</li> </ul> <pre><code>cloney clone https://github.com/username/template-repo.git -v my-vars.yaml\n</code></pre> <ul> <li>Specifying variables inline:</li> </ul> <pre><code>cloney clone https://github.com/username/template-repo.git -v '{ app_name: \"MyApp\", enable_https: true }'\n</code></pre> <p></p>"},{"location":"cloney-cli/#dry-run-command","title":"Dry Run Command","text":"<p>The <code>cloney dry-run</code> command is used to debug your own Cloney Template Repository. It allows you to see how variables are replaced and check for errors in the cloning process. You can pass variables to this command in the same way as the <code>clone</code> command.</p> <pre><code>cloney dry-run -v my-vars.yaml\n</code></pre> <p></p>"},{"location":"cloney-template-repositories/","title":"Cloney Template Repositories","text":"<p>A Cloney Template Repository serves as the foundation for creating dynamic Git repositories using Cloney. It contains essential information and structures that allow users to customize and generate project templates tailored to their specific needs.</p>"},{"location":"cloney-template-repositories/#what-is-a-cloney-template-repository","title":"What is a Cloney Template Repository?","text":"<p>A Cloney Template Repository is a regular Git repository enriched with a special configuration file, <code>.cloney.yaml</code>, which defines the characteristics and variables of the template. This configuration file serves as the control center for your template, enabling dynamic content generation during the cloning process.</p>"},{"location":"cloney-template-repositories/#key-components-of-a-cloney-template-repository","title":"Key Components of a Cloney Template Repository","text":"<p>A Cloney Template Repository consists of the following key components:</p> <p>1. Git Repository: The core of your project, containing all the files, directories, and code that you want to share as a template.</p> <p>2. <code>.cloney.yaml</code> Metadata File: This special YAML file is located in the root of the repository and stores essential details about the template, such as variable definitions, descriptions, and other crucial information that Cloney relies on to generate dynamic templates.</p>"},{"location":"cloney-template-repositories/#the-power-of-variables","title":"The Power of Variables","text":"<p>One of the primary strengths of Cloney Template Repositories is the ability to define variables within your templates. These variables act as placeholders for values that can be customized during the cloning process, making your templates highly adaptable.</p>"},{"location":"cloney-template-repositories/#template-configuration","title":"Template Configuration","text":"<p>The <code>.cloney.yaml</code> metadata file also allows you to configure some aspects of your template. These configurations are optional and can be omitted if you don't require them. For example, you can define paths to ignore when cloning the template, ensuring that specific files or directories are excluded from the customization process.</p>"},{"location":"cloney-template-repositories/#creating-your-own-cloney-template-repository","title":"Creating Your Own Cloney Template Repository","text":"<p>To create your Cloney Template Repository, follow these steps:</p> <ol> <li> <p>Set up a Git repository for your project, including all the files and directories you want to include in your template.</p> </li> <li> <p>Create a <code>.cloney.yaml</code> file in the root of your repository. In this file, define the template's metadata, variables, and any optional configurations.</p> </li> <li> <p>Commit and push your changes to your Git repository.</p> </li> </ol> <p>With these simple steps, you've transformed your standard Git repository into a Cloney Template Repository, ready to be customized and cloned by others.</p>"},{"location":"cloney-template-repositories/#discover-cloney-templates-in-action","title":"Discover Cloney Templates in Action","text":"<p>Explore Cloney templates and see how they work by visiting the Cloney Example Template Repository. Here, you can:</p> <ul> <li>Explore its structure.</li> <li>Check out its <code>.cloney.yaml</code> metadata file.</li> <li>Customize variables to see Cloney in action.</li> </ul> <p>Experience the simplicity of project setup and customization by exploring this example repository.</p>"},{"location":"getting-started/","title":"Getting Started with Cloney","text":"<p>Whether you want to use existing Cloney templates or create your own, the first step is to install the Cloney Command-Line Interface (CLI) on your system.</p>"},{"location":"getting-started/#installing-cloney","title":"Installing Cloney","text":"<p>To begin your Cloney journey, follow these steps to install the Cloney CLI on your system. You can install Cloney on Windows, Linux, or macOS and choose the appropriate architecture for your machine.</p>"},{"location":"getting-started/#step-1-choose-your-operating-system-and-architecture","title":"Step 1: Choose Your Operating System and Architecture","text":"<p>Refer to the table below to select the download button that matches your operating system and architecture:</p> Operating System Architecture Download Link Windows AMD64 Download  ARM64 Download  Linux AMD64 Download  ARM64 Download  macOS AMD64 Download  ARM64 Download"},{"location":"getting-started/#step-2-add-cloney-to-your-systems-path","title":"Step 2: Add Cloney to Your System's PATH","text":"<p>After the download is complete, you will need to unzip the downloaded file. Once unzipped, add the Cloney executable to your system's PATH to make it accessible from the command line.</p>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<p>Now that you have Cloney installed on your system, you're ready to start working with Cloney templates. Depending on your goals, you can choose one of two paths:</p>"},{"location":"getting-started/#path-1-using-cloney-templates-as-a-user","title":"Path 1: Using Cloney Templates as a User","text":"<p>If you want to leverage existing Cloney templates created by others, follow the path of a user. You can explore and clone templates tailored to various use cases. To get started as a user, head over to the User's Guide for detailed instructions on how to clone and customize Cloney templates.</p>"},{"location":"getting-started/#path-2-creating-your-own-cloney-templates-as-a-creator","title":"Path 2: Creating Your Own Cloney Templates as a Creator","text":"<p>If you're interested in crafting your own Cloney templates and sharing them with the community, follow the path of a creator. You can design templates, define variables, and empower others to generate projects based on your templates. To start creating templates as a creator, visit the Creator's Guide for comprehensive guidance on template creation and customization.</p>"},{"location":"creators/accessing-template-variables/","title":"Accessing Template Variables","text":"<p>Cloney makes it effortless to access and utilize variables within your template files. It employs the Go template syntax, a powerful and flexible language for generating text and code. It's essential to note that you don't require any knowledge of Go programming to utilize Cloney effectively. The term \"Go template\" is simply a historical reference to the language where these templates initially emerged.</p> <p>To access and use variables within your template files, follow these steps:</p> <ol> <li> <p>Enclose Variables with Double Curly Braces: To indicate that a piece of text should be replaced with a variable's value, enclose the variable name within double curly braces. For example, <code>{{ .VariableName }}</code>.</p> </li> <li> <p>Use the Dot (<code>.</code>) to Access Variables: In Go templates, you access variables by prefixing their names with a dot (<code>.</code>). This dot signifies the context in which the variable is defined.</p> </li> </ol> <p>Example:</p> <p>Imagine you're working with a Cloney Template Repository for a billing system. In this template, you want to create a customized HTML file based on various parameters. Let's explore how Cloney's variables can make this process effortless.</p> <p>Here's a snippet from your template HTML file, <code>index.html</code>:</p> <pre><code>&lt;!-- File: index.html --&gt;\n&lt;h1&gt;\n  {{ .app_name }} is a fantastic app that supports the following currencies:\n&lt;/h1&gt;\n&lt;ul&gt;\n  {{- range .currencies }}\n  &lt;li&gt;{{ . }}&lt;/li&gt;\n  {{- end }}\n&lt;/ul&gt;\n{{- if .enable_https }}\n&lt;p&gt;HTTPS is enabled.&lt;/p&gt;\n{{- end }}\n</code></pre> <p>Now, let's break down what's happening here:</p> <p><code>{{ .app_name }}</code>: This placeholder will be replaced with the user-defined name of the application when you generate your customized template.</p> <p><code>{{- range .currencies }} ... {{- end }}</code>: This construct iterates through the list of currencies provided by the user during the cloning process. It dynamically generates list items for each currency.</p> <p><code>{{- if .enable_https }} ... {{- end }}</code>: This conditional block checks if the user has chosen to enable HTTPS during cloning. If so, it includes a paragraph indicating that HTTPS is enabled.</p> <p>When you use Cloney to create your template based on user input, it automatically populates these placeholders with the values you specified during the cloning process. This results in a tailored HTML file that perfectly suits your requirements.</p> <p>Here's an example of what the generated HTML could look like:</p> <pre><code>&lt;!-- File: index.html --&gt;\n&lt;h1&gt;MyApp is a fantastic app that supports the following currencies:&lt;/h1&gt;\n&lt;ul&gt;\n&lt;li&gt;Real&lt;/li&gt;\n&lt;li&gt;US Dollar&lt;/li&gt;\n&lt;li&gt;Yen&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;HTTPS is enabled.&lt;/p&gt;\n</code></pre> <p>It's important to mention that, although this example uses HTML, you can use Cloney variables in any type of file. This includes YAML, JSON, Markdown, and even source code files.</p>"},{"location":"creators/cloney-metadata-file/","title":"The Cloney Metadata File","text":"<p>To harness the full potential of Cloney Template Repositories, it's crucial to grasp the structure and content of the <code>.cloney.yaml</code> metadata file. This file serves as the blueprint for your template, defining its characteristics, variables, and default settings. Below is an illustrative example of a <code>.cloney.yaml</code> file:</p> <pre><code>manifest_version: v1\nname: Bank Site\ndescription: A template to create a site for a bank.\nauthors:\n- Chico Buarque\n- Freddie Mercury\n- John Lennon\nlicense: MIT\ntemplate_version: \"1.1.0\"\nconfiguration:\nignore_paths:\n- development/*.html\n- images/*.jpg\nvariables:\n- name: app_name\ndescription: The name of your application.\ndefault: my_app\nexample: my_app\n- name: enable_https\ndescription: Wheter to enable HTTPS or not.\nexample: true\n- name: currencies\ndescription: List of currencies to use.\nexample:\n- Real\n- US Dollar\n- Yen\n</code></pre> <p>manifest_version: The version of the Cloney manifest file used in the template, ensuring compatibility with different versions of Cloney.</p> <p>name: The name of your template, providing a clear identifier for users.</p> <p>description: A brief but informative description of your template's purpose and functionality.</p> <p>authors: A list of contributors or creators of the template, acknowledging their role in its development.</p> <p>license: The licensing information for your template, specifying how others can use and distribute it.</p> <p>template_version: The version number of your template, allowing users to identify different releases.</p> <p>configuration: A section that allows you to configure some optional aspects of your template.</p> <p>variables: A list of variables that users can customize during the cloning process.</p>"},{"location":"creators/cloney-metadata-file/#template-configuration","title":"Template Configuration","text":"<p>The <code>.cloney.yaml</code> metadata file also allows you to configure some aspects of your template. These configurations are optional and can be omitted if you don't require them.</p> <p>Ignore Paths: This configuration allows you to specify a list of paths to ignore when cloning the template. This is useful for excluding files that are not relevant to the template's customization process.</p>"},{"location":"creators/cloney-metadata-file/#template-variables","title":"Template Variables","text":"<p>Within the <code>.cloney.yaml</code> metadata file, Cloney allows you to define variables that users can customize during the cloning process. These variables play a central role in enabling dynamic template creation, ensuring that users can tailor templates to their specific requirements.</p> <p>Name: Assign a unique identifier to each variable, making it easy for users to reference and customize.</p> <p>Description: Provide a clear and concise description of each variable's purpose. These descriptions guide users in understanding how each variable affects the template.</p> <p>Default (Optional): Specify a default value for each variable. This value is used when a user doesn't provide a custom value during the cloning process. If this field is omitted, Cloney assumes that the variable is mandatory and must be informed by the user.</p> <p>Example Value: Every variable must include an example value that demonstrates how it should be formatted and used. This example serves as a practical reference for users, helping them correctly configure variables within their customized templates.</p> <p>Validate (Optional): This parameter determines whether the variable's value should undergo validation when it is cloned. By default, this setting is enabled (<code>true</code>). Although not recommended, you have the option to disable validation by setting this field to <code>false</code>. Disabling validation can be particularly beneficial for variables with dynamic characteristics, such as variables that may assume various types or maps with dynamically changing keys.</p>"},{"location":"creators/dynamic-file-generation/","title":"Dynamic File Generation","text":"<p>Cloney, allows you to not only replace placeholders with variable values but also generate files and directories dynamically. This feature is particularly useful for creating multiple files based on a template and data. Let's dive into the process using a practical example.</p>"},{"location":"creators/dynamic-file-generation/#example-scenario","title":"Example Scenario","text":"<p>Suppose you have a YAML variables file like the one below:</p> <pre><code>app_name: MyApp\ncurrencies:\n- name: USD\nsymbol: $\ndescription: \"United States Dollar\"\n- name: EUR\nsymbol: \u20ac\ndescription: \"Euro\"\n- name: GBP\nsymbol: \u00a3\ndescription: \"British Pound\"\n</code></pre> <p>Your goal is to create a home page that lists all the currencies and links to a dedicated page for each currency.</p>"},{"location":"creators/dynamic-file-generation/#creating-the-homehtml-template","title":"Creating the <code>home.html</code> Template","text":"<p>You can start by creating a <code>home.html</code> file that dynamically generates the content for each currency and generates links to their respective pages.</p> <pre><code>&lt;!-- File: home.html --&gt;\n{{- define \"currency-file-content\" -}}\n&lt;!-- File: {{ .name }}.html --&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\"&gt;\n&lt;title&gt;Currency: {{ .name }}&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;Currency: {{ .name }}&lt;/h1&gt;\n&lt;p&gt;Symbol: {{ .symbol }}&lt;/p&gt;\n&lt;p&gt;Description: {{ .description }}&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n{{- end -}}\n\n&lt;p&gt;Check out the different currencies:&lt;/p&gt;\n&lt;ul&gt;\n{{- range .currencies }}\n{{- $fileName := printf \"%s.html\" .name }}\n{{- toFile $fileName \"currency-file-content\" . }}\n  &lt;li&gt;\n&lt;a href=\"{{ $fileName }}\"&gt;{{ .name }}&lt;/a&gt;\n&lt;/li&gt;\n{{- end }}\n&lt;/ul&gt;\n</code></pre> <p>Let's break down what's happening within this template:</p> <p><code>{{- define \"currency-file-content\" -}} ... {{- end -}}</code>: This defines a template named <code>currency-file-content</code> that will be used to generate the content of each currency's page.</p> <p><code>{{- range .currencies }} ... {{- end }}</code>: This iterates through the list of currencies provided in your YAML data.</p> <p><code>{{- $fileName := printf \"%s.html\" .name }}</code>: This creates a variable named <code>fileName</code> to store the name of the file to be generated. The file name will be constructed using the currency's name with the <code>.html</code> extension.</p> <p><code>{{- toFile $fileName \"currency-file-content\" . }}</code>: This generates a file named <code>fileName</code> using the <code>currency-file-content</code> template and the current currency as the context. This is where the dynamic file generation happens.</p>"},{"location":"creators/dynamic-file-generation/#generated-output","title":"Generated Output","text":"<p>When Cloney processes this template, it generates several files. The <code>home.html</code> file will have the following content:</p> <pre><code>&lt;!-- File: home.html --&gt;\n&lt;p&gt;Check out the different currencies:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;\n&lt;a href=\"USD.html\"&gt;USD&lt;/a&gt;\n&lt;/li&gt;\n&lt;li&gt;\n&lt;a href=\"EUR.html\"&gt;EUR&lt;/a&gt;\n&lt;/li&gt;\n&lt;li&gt;\n&lt;a href=\"GBP.html\"&gt;GBP&lt;/a&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre> <p>Additionally, Cloney generates three other files, namely <code>USD.html</code>, <code>EUR.html</code>, and <code>GBP.html</code>, each containing content specific to the respective currency:</p> <pre><code>&lt;!-- File: USD.html --&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\"&gt;\n&lt;title&gt;Currency: USD&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;Currency: USD&lt;/h1&gt;\n&lt;p&gt;Symbol: $&lt;/p&gt;\n&lt;p&gt;Description: United States Dollar&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"creators/dynamic-file-generation/#known-limitations-and-workarounds","title":"Known Limitations and Workarounds","text":"<p>While Cloney's dynamic file generation is a powerful feature, there are certain limitations and workarounds to consider when working with it.</p>"},{"location":"creators/dynamic-file-generation/#limitation-accessing-root-level-variables","title":"Limitation: Accessing Root-Level Variables","text":"<p>In the example provided, accessing root-level variables like <code>app_name</code> from within the <code>currency-file-content</code> template can be challenging. This is because the context within the template is limited to the data passed to it, and it does not have direct access to variables defined outside the template.</p>"},{"location":"creators/dynamic-file-generation/#workaround-using-a-dictionary","title":"Workaround: Using a Dictionary","text":"<p>To access root-level variables within a dynamically generated template, you can use a dictionary to store both the root-level variables and the parameters needed for the <code>currency-file-content</code> template. Here's how to do it:</p> <pre><code>{{- $dict := dict \"root\" $ \"param\" . -}}\n{{- toFile $fileName \"currency-file-content\" $dict -}}\n</code></pre> <p>In this code, a dictionary named <code>$dict</code> is created, which contains two key-value pairs: <code>\"root\"</code> and <code>\"param\"</code>. <code>\"root\"</code> is assigned the value of the root-level context (<code>$</code>), and <code>\"param\"</code> is assigned the value of the current currency data (<code>.</code>).</p>"},{"location":"creators/dynamic-file-generation/#accessing-variables-in-the-template","title":"Accessing Variables in the Template","text":"<p>With the dictionary approach, you can now access root-level variables and parameters in the <code>currency-file-content</code> template as follows:</p> <pre><code>{{- define \"currency-file-content\" -}}\n&lt;p&gt;The app name is: {{ .root.app_name }}&lt;/p&gt;\n&lt;p&gt;The currency name is: {{ .param.name }}&lt;/p&gt;\n{{- end -}}\n</code></pre> <p>By using this workaround, you can access both root-level and local variables within your dynamically generated files.</p>"},{"location":"creators/go-template-tutorials/","title":"Go Template Tutorials","text":"<p>To help you make the most of Cloney's dynamic variables and the Go template syntax, we recommend exploring tutorials and documentation on Go templates. Go templates is a widely used tool for generating text and are well-documented within the Go programming language. You can find these resources at:</p>"},{"location":"creators/go-template-tutorials/#official-go-documentation","title":"Official Go Documentation","text":"<p>Explore the official Go documentation for the <code>text/template</code> package, which provides an in-depth look at Go templates. This comprehensive resource will help you understand the intricacies of template creation and customization.</p> <p>Go Template Package Documentation</p>"},{"location":"creators/go-template-tutorials/#go-text-templates","title":"Go Text Templates","text":"<p>Check out the official Go documentation dedicated to text templates. It offers comprehensive insights into working with Go templates, including advanced topics and best practices.</p> <p>Go Text Templates</p>"},{"location":"creators/go-template-tutorials/#sprig-functions","title":"Sprig Functions","text":"<p>Cloney leverages the Sprig library, which extends Go templates with a variety of useful functions. Familiarize yourself with these functions to enhance the capabilities of your Cloney templates and streamline your projects.</p> <p>Explore Sprig Functions</p>"},{"location":"creators/go-template-tutorials/#helm-template-functions","title":"Helm Template Functions","text":"<p>Helm is a widely-used package manager for Kubernetes, utilizing Go templates and introducing custom functions. Cloney integrates with Helm's <code>include</code> function, enabling its use within your templates.</p> <p>Explore Helm's Include Function</p>"},{"location":"users/","title":"Testando...","text":""},{"location":"users/providing-custom-variables/","title":"Providing Custom Variables","text":"<p>When working with Cloney Template Repositories, users can easily customize variables by providing values that correspond to the variable definitions in the template repository's <code>.cloney.yaml</code> metadata file. This allows you to tailor the template to your specific requirements.</p>"},{"location":"users/providing-custom-variables/#creating-a-yaml-variables-file","title":"Creating a YAML Variables File","text":"<p>To provide custom values for the variables, create a YAML variables file. In this file, you'll define the values you want to assign to the variables. Here's an example of a YAML variables file:</p> <pre><code>app_name: My App\nenable_https: true\ncurrencies:\n- Real\n- US Dollar\n- Yen\n</code></pre> <p>In this example, we've defined values for three variables: <code>app_name</code>, <code>enable_https</code>, and <code>currencies</code>. You can customize these variables according to your project's needs.</p>"},{"location":"users/providing-custom-variables/#using-cloney-cli-to-apply-custom-variables","title":"Using Cloney CLI to Apply Custom Variables","text":"<p>Once you've created your YAML variables file, you can apply it to the Cloney Template Repository using the Cloney Command-Line Interface (CLI). Here's how to do it:</p> <pre><code>cloney clone https://github.com/username/repository.git --variables your-variables-file.yaml\n</code></pre> <p>In this command:</p> <ul> <li><code>https://github.com/username/repository.git</code> is the URL of the Cloney Template Repository you want to clone.</li> <li><code>--variables your-variables-file.yaml</code> specifies the path to your YAML variables file, which contains the custom values for the template variables.</li> </ul> <p>By running this command, Cloney will clone the template repository and apply the custom values from your YAML variables file during the cloning process. This ensures that the generated project reflects your specific configurations and requirements.</p>"}]}