{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Official Cloney Documentation","text":"<p>Have you ever found yourself in the situation where you discover a fantastic template Git repository on GitHub, only to realize that it doesn't quite fit your unique project requirements? You're not alone. Traditional Git templates often leave you with the burden of customizing every detail manually, which can be time-consuming and error-prone. This is where Cloney comes to the rescue.</p> <p> </p>"},{"location":"#the-pain-of-manual-adjustments","title":"The Pain of Manual Adjustments","text":"<p>Picture this: you stumble upon a promising template Git repository that could kickstart your project. Excited, you fork the repository, but soon, you realize it needs extensive adjustments. You have to replace placeholder values, tweak configurations, and adapt the code to match your project's specifications.</p> <p>This process can be both frustrating and error-prone. Manually searching and replacing values throughout the codebase can lead to mistakes and inconsistencies. What if you could automate this entire customization process and have a template repository that adapts itself to your needs effortlessly? That's precisely what Cloney, a free and open-source tool developed in Go, is designed to do.</p>"},{"location":"#introducing-cloney-template-repositories","title":"Introducing Cloney Template Repositories","text":"<p>Cloney Template Repositories are the heart of Cloney's innovative approach. These repositories are enriched with a special <code>.cloney.yaml</code> metadata file that contains information about the template repository. This metadata file defines variables and configurations, making the template adaptable to various use cases.</p> <p>With Cloney, you no longer need to manually tweak code, search for placeholders, or worry about consistency. Instead, you can:</p> <ul> <li> <p>Define variables within the <code>.cloney.yaml</code> file, allowing you to customize different aspects of the template, such as project names, descriptions, and more.</p> </li> <li> <p>Use Go templates, a powerful and flexible templating language, to dynamically generate files and directories based on your provided variables.</p> </li> <li> <p>Focus on your project's unique requirements and let Cloney handle the repetitive and error-prone customization tasks.</p> </li> </ul>"},{"location":"#key-features-of-cloney","title":"Key Features of Cloney","text":"<ul> <li> <p>Dynamic Template Customization: Customize templates by defining variables and leveraging Go templates for dynamic content generation.</p> </li> <li> <p>Automation: Eliminate the need for manual adjustments and repetitive tasks when setting up projects based on templates.</p> </li> <li> <p>Consistency: Ensure consistency and reduce errors across projects derived from Cloney Template Repositories.</p> </li> <li> <p>Flexibility: Adapt templates to a wide range of use cases, from code projects to documentation and beyond.</p> </li> <li> <p>Community: Join a growing community of developers and template maintainers who share and collaborate on Cloney Template Repositories.</p> </li> </ul>"},{"location":"#getting-started-with-cloney","title":"Getting Started with Cloney","text":"<p>Now that you have a glimpse of what Cloney, can do, it's time to dive deeper into how to use it effectively. Head over to the Getting Started guide to set up Cloney and begin using it for your Git projects.</p>"},{"location":"cloney-template-repositories/","title":"Cloney Template Repositories","text":"<p>A Cloney Template Repository serves as the foundation for creating dynamic Git repositories using Cloney. It contains essential information and structures that allow users to customize and generate project templates tailored to their specific needs.</p>"},{"location":"cloney-template-repositories/#what-is-a-cloney-template-repository","title":"What is a Cloney Template Repository?","text":"<p>A Cloney Template Repository is a regular Git repository enriched with a special configuration file, <code>.cloney.yaml</code>, which defines the characteristics and variables of the template. This configuration file serves as the control center for your template, enabling dynamic content generation during the cloning process.</p>"},{"location":"cloney-template-repositories/#key-components-of-a-cloney-template-repository","title":"Key Components of a Cloney Template Repository","text":"<p>A Cloney Template Repository consists of the following key components:</p> <p>1. Git Repository: The core of your project, containing all the files, directories, and code that you want to share as a template.</p> <p>2. <code>.cloney.yaml</code> Metadata File: This special YAML file is located in the root of the repository and stores essential details about the template, such as variable definitions, descriptions, and other crucial information that Cloney relies on to generate dynamic templates.</p>"},{"location":"cloney-template-repositories/#the-power-of-variables","title":"The Power of Variables","text":"<p>One of the primary strengths of Cloney Template Repositories is the ability to define variables within your templates. These variables act as placeholders for values that can be customized during the cloning process, making your templates highly adaptable.</p>"},{"location":"cloney-template-repositories/#template-configuration","title":"Template Configuration","text":"<p>The <code>.cloney.yaml</code> metadata file also allows you to configure some aspects of your template. These configurations are optional and can be omitted if you don't require them. For example, you can define paths to ignore when cloning the template, ensuring that specific files or directories are excluded from the customization process.</p>"},{"location":"cloney-template-repositories/#discover-cloney-templates-in-action","title":"Discover Cloney Templates in Action","text":"<p>Explore Cloney templates and see how they work by visiting the Cloney Example Template Repository. Here, you can:</p> <ul> <li>Explore its structure.</li> <li>Check out its <code>.cloney.yaml</code> metadata file.</li> <li>Customize variables to see Cloney in action.</li> </ul> <p>Experience the simplicity of project setup and customization by exploring this example repository.</p>"},{"location":"getting-started/","title":"Getting Started with Cloney","text":"<p>Whether you want to use existing Cloney templates or create your own, the first step is to install the Cloney Command-Line Interface (CLI) on your system.</p>"},{"location":"getting-started/#installing-cloney","title":"Installing Cloney","text":"<p>To begin your Cloney journey, follow these steps to install the Cloney CLI on your system. You can install Cloney on Windows, Linux, or macOS and choose the appropriate architecture for your machine.</p>"},{"location":"getting-started/#step-1-choose-your-operating-system-and-architecture","title":"Step 1: Choose Your Operating System and Architecture","text":"<p>Refer to the table below to select the download button that matches your operating system and architecture:</p> 0.2.0 (Latest)  <p> Operating System Architecture Download Link Windows amd64 Download Latest (0.2.0) arm64 Download Latest (0.2.0) Linux amd64 Download Latest (0.2.0) arm64 Download Latest (0.2.0) macOS amd64 Download Latest (0.2.0) arm64 Download Latest (0.2.0) </p> <p>Compatibility</p> <p>This version of Cloney is compatible with the following <code>.cloney.yaml</code> manifest versions: <code>v1</code>.</p>"},{"location":"getting-started/#step-2-unzip-the-downloaded-file-and-add-cloney-to-your-systems-path","title":"Step 2: Unzip the Downloaded File and Add Cloney to Your System's PATH","text":"<p>After downloading Cloney, to make it accessible from the command line, you will need to unzip the downloaded file and then add the Cloney executable to your system's PATH. The process for adding Cloney to your PATH varies depending on your operating system:</p> Windows Linux and macOS  <ol> <li> <p>Unzip the Downloaded File: Locate the downloaded Cloney zip file and right-click on it. Select \"Extract All\" from the context menu and follow the prompts to unzip the file.</p> </li> <li> <p>Open the Start Menu: Click on the Windows icon in the taskbar to open the Start Menu.</p> </li> <li> <p>Search for \"Environment Variables\": In the search bar, type \"Environment Variables\" and select \"Edit the system environment variables\" from the results.</p> </li> <li> <p>Open the Environment Variables: In the System Properties window, click the \"Environment Variables\" button near the bottom right.</p> </li> <li> <p>Edit the PATH Variable: In the Environment Variables window, under the \"System variables\" section, find the \"Path\" variable and click \"Edit.\"</p> </li> <li> <p>Add Cloney to PATH: Click \"New\" and then enter the path to the directory where you extracted the Cloney executable file. For example, if you extracted it to <code>C:\\Program Files\\Cloney</code>, add that path. Click \"OK\" to save your changes.</p> </li> <li> <p>Verify Installation: Open a new command prompt window, type <code>cloney</code>, and press Enter. If you see Cloney's command-line interface information, you have successfully added it to your PATH.</p> </li> </ol> <ol> <li> <p>Unzip the Downloaded File: Open a terminal window, navigate to the directory where you downloaded Cloney, and use the <code>unzip</code> command to extract the contents of the downloaded zip file.</p> <pre><code>unzip cloney-linux-amd64.zip # Change the filename as needed.\n</code></pre> </li> <li> <p>Edit Your Shell Profile: Depending on your shell (bash, zsh, etc.), open the appropriate shell profile configuration file.</p> <ul> <li> <p>For bash, you can edit the <code>.bashrc</code> file using a text editor like <code>nano</code> or <code>vim</code>:</p> <pre><code>nano ~/.bashrc\n</code></pre> </li> <li> <p>For zsh, edit the <code>.zshrc</code> file:</p> <pre><code>nano ~/.zshrc\n</code></pre> </li> </ul> </li> <li> <p>Add Cloney to PATH: Add the following line at the end of the file, replacing <code>/path/to/cloney</code> with the actual path to the directory where you extracted the Cloney executable file:</p> <pre><code>export PATH=\"$PATH:/path/to/cloney\"\n</code></pre> </li> <li> <p>Save and Exit: Save the file and exit the text editor.</p> </li> <li> <p>Reload Your Shell: To apply the changes, either restart your terminal or run the following command:</p> <pre><code>source ~/.bashrc   # For bash users.\nsource ~/.zshrc    # For zsh users.\n</code></pre> </li> <li> <p>Verify Installation: Open a new terminal window, type <code>cloney</code>, and press Enter. If you see Cloney's command-line interface information, you have successfully added it to your PATH.</p> </li> </ol> <p>That's it! Now, you've successfully unzipped the downloaded file and added Cloney to your system's PATH on Windows, Linux, or macOS, allowing you to use it from the command line.</p>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<p>Now that you have Cloney installed on your system, you're ready to start working with Cloney templates. Depending on your goals, you can choose one of two paths:</p>"},{"location":"getting-started/#users-path-using-cloney-templates-as-a-user","title":"User's Path: Using Cloney Templates as a User","text":"<p>If you want to leverage existing Cloney templates created by others, follow the path of a user. You can explore and clone templates tailored to various use cases. To get started as a user, head over to the User's Guide for detailed instructions on how to clone and customize Cloney templates.</p>"},{"location":"getting-started/#creators-path-creating-your-own-cloney-templates-as-a-creator","title":"Creator's Path: Creating Your Own Cloney Templates as a Creator","text":"<p>If you're interested in crafting your own Cloney templates and sharing them with the community, follow the path of a creator. You can design templates, define variables, and empower others to generate projects based on your templates. To start creating templates as a creator, visit the Creator's Guide for comprehensive guidance on template creation and customization.</p>"},{"location":"commands/","title":"Cloney Command-Line Interface (CLI)","text":"<p>The Cloney Command-Line Interface (CLI) is the tool you use to interact with Cloney template repositories. It offers a set of straightforward commands that enable you to manage, customize, and work with Cloney templates.</p>"},{"location":"commands/#available-commands","title":"Available Commands","text":"<p>Here is a list of the available commands in the Cloney CLI:</p> <ul> <li><code>clone</code>: Clone a Cloney template repository.</li> <li><code>docs</code>: Open the Cloney documentation in your browser.</li> <li><code>dry-run</code>: Run a template repository in dry-run mode for testing.</li> <li><code>info</code>: Display information about a Cloney template repository.</li> <li><code>start</code>: Start a Cloney template repository.</li> <li><code>validate</code>: Validate your Cloney template repository.</li> <li><code>version</code>: Check the current version of Cloney.</li> </ul>"},{"location":"commands/clone/","title":"<code>clone</code> Command","text":"Cloney 0.1.0 or Above <p>Clone a template repository using the <code>clone</code> command. This command allows you to clone a Cloney Template Repository while providing the option to customize it with specific variable values.</p> <p>By default, this command searches for a file named <code>.cloney-vars.yaml</code> in your current directory for variable values. However, with the <code>--variables</code> flag you can specify a different file or pass the variables inline as YAML.</p>"},{"location":"commands/clone/#flags","title":"Flags","text":"Flag Description Default Value <code>-b, --branch string</code> Specifies the Git branch. <code>\"main\"</code> <code>-o, --output string</code> Specifies the path to clone the repository to. <code>-t, --tag string</code> Specifies the Git tag. <code>-k, --token string</code> Specifies the Git token, if referencing a private Git repository. <code>-v, --variables string</code> Specifies the path to a template variables file or raw YAML. <code>\".cloney-vars.yaml\"</code>"},{"location":"commands/clone/#example-1-basic-cloning","title":"Example 1: Basic Cloning","text":"<p>Clone a template repository without specifying a variables file:</p> <pre><code>cloney clone https://github.com/username/repository.git\n</code></pre>"},{"location":"commands/clone/#example-2-using-a-custom-variables-file","title":"Example 2: Using a Custom Variables File","text":"<p>Clone a template repository and specify a different variables file (e.g., <code>variables.yaml</code>):</p> <pre><code>cloney clone https://github.com/username/repository.git -v variables.yaml\n</code></pre>"},{"location":"commands/clone/#example-3-inline-variables","title":"Example 3: Inline Variables","text":"<p>Clone a template repository with inline variable values:</p> <pre><code>cloney clone https://github.com/username/repository.git -v '{ var1: value, var2: value }'\n</code></pre>"},{"location":"commands/docs/","title":"<code>docs</code> Command","text":"Cloney 0.2.0 or Above <p>The <code>docs</code> command opens the Cloney documentation in your browser.</p>"},{"location":"commands/docs/#example-1-basic-documentation-open","title":"Example 1: Basic Documentation Open","text":"<p>Open the Cloney documentation in your browser:</p> <pre><code>cloney docs\n</code></pre>"},{"location":"commands/dry-run/","title":"<code>dry-run</code> Command","text":"Cloney 0.1.0 or Above <p>The <code>dry-run</code> command is used for debugging purposes, allowing you to inspect the output generated by your Cloney Template Repository with the provided variables. This command helps you verify variable replacement and check for errors in the cloning process.</p> <p>By default, this command searches for a file named <code>.cloney-vars.yaml</code> in your current directory for variable values. However, with the <code>--variables</code> flag you can specify a different file or pass the variables inline as YAML.</p>"},{"location":"commands/dry-run/#flags","title":"Flags","text":"Flag Description Default Value <code>-o, --output string</code> Specifies the path to output the filled template files. <code>\"cloney-dry-run-results\"</code> <code>-i, --output-in-terminal</code> Outputs the filled template file contents in the terminal instead of creating the files. <code>false</code> <code>-v, --variables string</code> Specifies the path to a template variables file or raw YAML. <code>\".cloney-vars.yaml\"</code>"},{"location":"commands/dry-run/#example-1-using-default-variables-file","title":"Example 1: Using Default Variables File","text":"<p>Run a dry-run on your local template repository using the default variables file, <code>.cloney-vars.yaml</code>:</p> <pre><code>cloney dry-run\n</code></pre>"},{"location":"commands/dry-run/#example-2-using-a-custom-variables-file","title":"Example 2: Using a Custom Variables File","text":"<p>Specify a different variables file (e.g., <code>variables.yaml</code>) for the dry-run:</p> <pre><code>cloney dry-run -v variables.yaml\n</code></pre>"},{"location":"commands/dry-run/#example-3-inline-variables","title":"Example 3: Inline Variables","text":"<p>Run a dry-run with inline variable values:</p> <pre><code>cloney dry-run -v '{ var1: value, var2: value }'\n</code></pre>"},{"location":"commands/dry-run/#example-4-dry-run-from-local-path","title":"Example 4: Dry-run from Local Path","text":"<p>Run a dry-run on a template repository from a local path:</p> <pre><code>cloney dry-run ./path/to/my/template -v variables.yaml\n</code></pre>"},{"location":"commands/info/","title":"<code>info</code> Command","text":"Cloney 0.1.0 or Above <p>Get information about a Cloney template repository using the <code>info</code> command. This command provides details about a Cloney template repository, including its name, description, and variables.</p> <p>The <code>info</code> command can retrieve information from both local and remote template repositories. By default, it retrieves information from the current directory, assuming it is a template repository.</p>"},{"location":"commands/info/#flags","title":"Flags","text":"Flag Description Default Value <code>-b, --branch string</code> Specifies the Git branch when referencing a git repository. <code>\"main\"</code> <code>-t, --tag string</code> Specifies the Git tag when referencing a git repository. <code>-k, --token string</code> Specifies the Git token when referencing a private git repository."},{"location":"commands/info/#example-1-basic-info-retrieval","title":"Example 1: Basic Info Retrieval","text":"<p>Retrieve information about the current template repository (assuming it is a template repository):</p> <pre><code>cloney info\n</code></pre>"},{"location":"commands/info/#example-2-info-from-local-path","title":"Example 2: Info from Local Path","text":"<p>Retrieve information about a template repository from a local path:</p> <pre><code>cloney info ./path/to/my/template\n</code></pre>"},{"location":"commands/info/#example-3-info-from-remote-repository-url","title":"Example 3: Info from Remote Repository URL","text":"<p>Retrieve information about a template repository from a remote repository URL:</p> <pre><code>cloney info https://github.com/username/repository.git\n</code></pre>"},{"location":"commands/start/","title":"<code>start</code> Command","text":"Cloney 0.1.0 or Above <p>Start a new Cloney template repository using the <code>start</code> command. This command creates a directory with all the necessary files to begin a new Cloney template repository.</p>"},{"location":"commands/start/#flags","title":"Flags","text":"Flag Description Default Value <code>-a, --authors stringArray</code> Specifies the authors of the template repository. <code>[]</code> <code>-d, --description string</code> Specifies the description of the template repository. <code>\"A Cloney template repository\"</code> <code>-l, --license string</code> Specifies the license of the template repository. <code>\"MIT\"</code> <code>-n, --name string</code> Specifies the name of the template repository. <code>\"cloney-template\"</code> <code>-y, --non-interactive</code> Skip questions and use default values and/or flags. <code>false</code> <code>-o, --output string</code> Specifies the directory where the template repository will be saved. <code>\"cloney-template\"</code>"},{"location":"commands/start/#example-1-basic-template-creation","title":"Example 1: Basic Template Creation","text":"<p>Start a new template repository with interactive prompts:</p> <pre><code>cloney start\n</code></pre>"},{"location":"commands/start/#example-2-non-interactive-mode","title":"Example 2: Non-Interactive Mode","text":"<p>Start a new template repository with default values and skip prompts:</p> <pre><code>cloney start -y\n</code></pre>"},{"location":"commands/validate/","title":"<code>validate</code> Command","text":"Cloney 0.1.0 or Above <p>Validate your Cloney template repository using the <code>validate</code> command. This command checks whether your Cloney template repository is valid by verifying the presence of the <code>.cloney.yaml</code> metadata file and checking if it is valid.</p>"},{"location":"commands/validate/#example-1-basic-validation","title":"Example 1: Basic Validation","text":"<p>Validate the current template repository (assuming it is a template repository):</p> <pre><code>cloney validate\n</code></pre>"},{"location":"commands/validate/#example-2-validation-from-local-path","title":"Example 2: Validation from Local Path","text":"<p>Validate a template repository from a local path:</p> <pre><code>cloney validate ./path/to/my/template\n</code></pre>"},{"location":"commands/version/","title":"<code>version</code> Command","text":"Cloney 0.1.0 or Above <p>The <code>version</code> command in Cloney allows you to check the current version of the Cloney CLI tool.</p>"},{"location":"commands/version/#example-1-basic-version-check","title":"Example 1: Basic Version Check","text":"<p>Check the current version of Cloney:</p> <pre><code>cloney version\n</code></pre>"},{"location":"creators/","title":"Creator's Path","text":"<p>Welcome to the world of Cloney template creation! If you're interested in crafting and customizing Cloney Template Repositories, you're in the right place. Here, you'll find a collection of resources to help you get started and become a proficient template creator. Explore the following sections to embark on your journey:</p> <ul> <li> <p>Creating Your First Template Repository</p> <p>Learn how to create your very first Cloney Template Repository, allowing you to share project templates that others can clone and customize.</p> <p> Creating Your First Template Repository</p> </li> <li> <p>The <code>.cloney.yaml</code> Metadata File</p> <p>Learn how to define the structure and variables of your Cloney Template Repository using the <code>.cloney.yaml</code> metadata file.</p> <p> The Metadata File</p> </li> <li> <p>Accessing Template Variables</p> <p>Discover how to access and utilize template variables, allowing you to create dynamic and adaptable templates.</p> <p> Accessing Template Variables</p> </li> <li> <p>Dynamic File Generation</p> <p>Explore the intricacies of dynamic file generation within Cloney templates, enabling you to generate files and directories based on user-provided variables.</p> <p> Dynamic File Generation</p> </li> <li> <p>Cloney Template Functions</p> <p>Learn how to use Cloney custom template functions to maximize your template customization capabilities.</p> <p> Cloney Template Functions</p> </li> <li> <p>Go Template Tutorials</p> <p>Get acquainted with Go templates and their powerful syntax. These tutorials provide insights into using Go templates effectively in your Cloney Template Repository.</p> <p> Go Template Tutorials</p> </li> </ul>"},{"location":"creators/accessing-template-variables/","title":"Accessing Template Variables","text":"<p>Cloney makes it effortless to access and utilize variables within your template files. It employs the Go template syntax, a powerful and flexible language for generating text and code. It's essential to note that you don't require any knowledge of Go programming to utilize Cloney effectively. The term \"Go template\" is simply a historical reference to the language where these templates initially emerged.</p> <p>To access and use variables within your template files, follow these steps:</p> <ol> <li> <p>Enclose Variables with Double Curly Braces: To indicate that a piece of text should be replaced with a variable's value, enclose the variable name within double curly braces. For example, <code>{{ .VariableName }}</code>.</p> </li> <li> <p>Use the Dot (<code>.</code>) to Access Variables: In Go templates, you access variables by prefixing their names with a dot (<code>.</code>). This dot signifies the context in which the variable is defined.</p> </li> </ol> <p>Example:</p> <p>Imagine you're working with a Cloney Template Repository for a billing system. In this template, you want to create a customized HTML file based on various parameters. Let's explore how Cloney's variables can make this process effortless.</p> <p>Here's a snippet from your template HTML file, <code>index.html</code>:</p> index.html<pre><code>&lt;!-- File: index.html --&gt;\n\n&lt;h1&gt;\n  {{ .app_name }} is a fantastic app that supports the following currencies:\n&lt;/h1&gt;\n&lt;ul&gt;\n  {{- range .currencies }}\n  &lt;li&gt;{{ . }}&lt;/li&gt;\n  {{- end }}\n&lt;/ul&gt;\n\n{{- if .enable_https }}\n&lt;p&gt;HTTPS is enabled.&lt;/p&gt;\n{{- end }}\n</code></pre> <p>Now, let's break down what's happening here:</p> <p><code>{{ .app_name }}</code>: This placeholder will be replaced with the user-defined name of the application when you generate your customized template.</p> <p><code>{{- range .currencies }} ... {{- end }}</code>: This construct iterates through the list of currencies provided by the user during the cloning process. It dynamically generates list items for each currency.</p> <p><code>{{- if .enable_https }} ... {{- end }}</code>: This conditional block checks if the user has chosen to enable HTTPS during cloning. If so, it includes a paragraph indicating that HTTPS is enabled.</p> <p>When you use Cloney to create your template based on user input, it automatically populates these placeholders with the values you specified during the cloning process. This results in a tailored HTML file that perfectly suits your requirements.</p> <p>Here's an example of what the generated HTML could look like:</p> index.html<pre><code>&lt;!-- File: index.html --&gt;\n\n&lt;h1&gt;MyApp is a fantastic app that supports the following currencies:&lt;/h1&gt;\n&lt;ul&gt;\n  &lt;li&gt;Real&lt;/li&gt;\n  &lt;li&gt;US Dollar&lt;/li&gt;\n  &lt;li&gt;Yen&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;HTTPS is enabled.&lt;/p&gt;\n</code></pre> <p>It's important to mention that, although this example uses HTML, you can use Cloney variables in any type of file. This includes YAML, JSON, Markdown, and even source code files.</p>"},{"location":"creators/cloney-metadata-file/","title":"The Cloney Metadata File","text":"<p>To harness the full potential of Cloney Template Repositories, it's crucial to grasp the structure and content of the <code>.cloney.yaml</code> metadata file. This file serves as the blueprint for your template, defining its characteristics, variables, and default settings. Below is an illustrative example of a <code>.cloney.yaml</code> file:</p> Manifest V1 (Latest) .cloney.yaml<pre><code>manifest_version: v1\n\nname: Bank Site\ndescription: A template to create a site for a bank.\nauthors:\n  - Chico Buarque\n  - Freddie Mercury\n  - John Lennon\nlicense: MIT\ntemplate_version: \"1.1.0\"\n\nconfiguration:\n  ignore_paths:\n    - development/*.html\n    - images/*.jpg\n\nvariables:\n  - name: app_name\n    description: The name of your application.\n    default: my_app\n    example: my_app\n\n  - name: enable_https\n    description: Wheter to enable HTTPS or not.\n    example: true\n\n  - name: currencies\n    description: List of currencies to use.\n    example:\n      - Real\n      - US Dollar\n      - Yen\n</code></pre> <p>manifest_version: The version of the Cloney manifest file used in the template, ensuring compatibility with different versions of Cloney.</p> <p>name: The name of your template, providing a clear identifier for users.</p> <p>description: A brief but informative description of your template's purpose and functionality.</p> <p>authors: A list of contributors or creators of the template, acknowledging their role in its development.</p> <p>license: The licensing information for your template, specifying how others can use and distribute it.</p> <p>template_version: The version number of your template, allowing users to identify different releases.</p> <p>configuration: A section that allows you to configure some optional aspects of your template.</p> <p>variables: A list of variables that users can customize during the cloning process.</p>"},{"location":"creators/cloney-metadata-file/#template-configuration","title":"Template Configuration","text":"<p>The <code>.cloney.yaml</code> metadata file also allows you to configure some aspects of your template. These configurations are optional and can be omitted if you don't require them.</p> <p>Ignore Paths: This configuration allows you to specify a list of paths to ignore when cloning the template. This is useful for excluding files that are not relevant to the template's customization process.</p>"},{"location":"creators/cloney-metadata-file/#template-variables","title":"Template Variables","text":"<p>Within the <code>.cloney.yaml</code> metadata file, Cloney allows you to define variables that users can customize during the cloning process. These variables play a central role in enabling dynamic template creation, ensuring that users can tailor templates to their specific requirements.</p> <p>Name: Assign a unique identifier to each variable, making it easy for users to reference and customize.</p> <p>Description: Provide a clear and concise description of each variable's purpose. These descriptions guide users in understanding how each variable affects the template.</p> <p>Default (Optional): Specify a default value for each variable. This value is used when a user doesn't provide a custom value during the cloning process. If this field is omitted, Cloney assumes that the variable is mandatory and must be informed by the user.</p> <p>Example Value: Every variable must include an example value that demonstrates how it should be formatted and used. This example serves as a practical reference for users, helping them correctly configure variables within their customized templates.</p> <p>Validate (Optional): This parameter determines whether the variable's value should undergo validation when it is cloned. By default, this setting is enabled (<code>true</code>). Although not recommended, you have the option to disable validation by setting this field to <code>false</code>. Disabling validation can be particularly beneficial for variables with dynamic characteristics, such as variables that may assume various types or maps with dynamically changing keys.</p>"},{"location":"creators/creating-your-first-template-repository/","title":"Creating Your First Template Repository","text":"<p>Creating a Cloney template repository allows you to share project templates that others can clone and customize. Follow these steps to create your very first Cloney template repository:</p>"},{"location":"creators/creating-your-first-template-repository/#step-1-initialize-a-new-template-repository","title":"Step 1: Initialize a New Template Repository","text":"<p>Use the Cloney Command-Line Interface (CLI) to start a new Cloney template repository. This will create a directory with the necessary files for your template.</p> <pre><code>cloney start\n</code></pre> <p>This command will guide you through the setup process, where you can specify details like authors, description, and license for your template repository.</p>"},{"location":"creators/creating-your-first-template-repository/#step-2-define-template-variables","title":"Step 2: Define Template Variables","text":"<p>Within your template repository directory, you can define variables in a <code>.cloney.yaml</code> metadata file. These variables will be customizable by users who clone your template repository. Here's an example:</p> .cloney.yaml<pre><code># Other metadata fields...\n\n# Define variables.\nvariables:\n  - name: app_name\n    description: The name of the application.\n    default: My App\n    example: My App\n\n  - name: dark_mode\n    description: Whether or not to enable dark mode.\n    example: true\n</code></pre> <p>Define the variables that users can customize and provide descriptions and examples to help users understand their purpose.</p>"},{"location":"creators/creating-your-first-template-repository/#step-3-share-your-template-repository","title":"Step 3: Share Your Template Repository","text":"<p>Share your template repository on platforms like GitHub, GitLab, or Bitbucket. Others can then clone your template repository and customize it according to their project requirements.</p> <ul> <li>Upload your template repository to a code hosting platform of your choice.</li> <li>Ensure that the repository is public or accessible to your intended audience.</li> </ul>"},{"location":"creators/dynamic-file-generation/","title":"Dynamic File Generation","text":"<p>Cloney, allows you to not only replace placeholders with variable values but also generate files and directories dynamically. This feature is particularly useful for creating multiple files based on a template and data. Let's dive into the process using a practical example.</p>"},{"location":"creators/dynamic-file-generation/#example-scenario","title":"Example Scenario","text":"<p>Suppose you have a YAML variables file like the one below:</p> .cloney-vars.yaml<pre><code>app_name: MyApp\ncurrencies:\n  - name: USD\n    symbol: $\n    description: \"United States Dollar\"\n  - name: EUR\n    symbol: \u20ac\n    description: \"Euro\"\n  - name: GBP\n    symbol: \u00a3\n    description: \"British Pound\"\n</code></pre> <p>Your goal is to create a home page that lists all the currencies and links to a dedicated page for each currency.</p>"},{"location":"creators/dynamic-file-generation/#creating-the-homehtml-template","title":"Creating the <code>home.html</code> Template","text":"<p>You can start by creating a <code>home.html</code> file that dynamically generates the content for each currency and generates links to their respective pages.</p> home.html<pre><code>&lt;!-- File: home.html --&gt;\n\n{{- define \"currency-file-content\" -}}\n&lt;!-- File: {{ .name }}.html --&gt;\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Currency: {{ .name }}&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Currency: {{ .name }}&lt;/h1&gt;\n    &lt;p&gt;Symbol: {{ .symbol }}&lt;/p&gt;\n    &lt;p&gt;Description: {{ .description }}&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n{{- end -}}\n\n&lt;p&gt;Check out the different currencies:&lt;/p&gt;\n\n&lt;ul&gt;\n{{- range .currencies }}\n{{- $fileName := printf \"%s.html\" .name }}\n{{- toFile $fileName \"currency-file-content\" . }}\n  &lt;li&gt;\n    &lt;a href=\"{{ $fileName }}\"&gt;{{ .name }}&lt;/a&gt;\n  &lt;/li&gt;\n{{- end }}\n&lt;/ul&gt;\n</code></pre> <p>Let's break down what's happening within this template:</p> <p><code>{{- define \"currency-file-content\" -}} ... {{- end -}}</code>: This defines a template named <code>currency-file-content</code> that will be used to generate the content of each currency's page.</p> <p><code>{{- range .currencies }} ... {{- end }}</code>: This iterates through the list of currencies provided in your YAML data.</p> <p><code>{{- $fileName := printf \"%s.html\" .name }}</code>: This creates a variable named <code>fileName</code> to store the name of the file to be generated. The file name will be constructed using the currency's name with the <code>.html</code> extension.</p> <p><code>{{- toFile $fileName \"currency-file-content\" . }}</code>: This generates a file named <code>fileName</code> using the <code>currency-file-content</code> template and the current currency as the context. This is where the dynamic file generation happens.</p>"},{"location":"creators/dynamic-file-generation/#generated-output","title":"Generated Output","text":"<p>When Cloney processes this template, it generates several files. The <code>home.html</code> file will have the following content:</p> home.html<pre><code>&lt;!-- File: home.html --&gt;\n\n&lt;p&gt;Check out the different currencies:&lt;/p&gt;\n&lt;ul&gt;\n  &lt;li&gt;\n    &lt;a href=\"USD.html\"&gt;USD&lt;/a&gt;\n  &lt;/li&gt;\n  &lt;li&gt;\n    &lt;a href=\"EUR.html\"&gt;EUR&lt;/a&gt;\n  &lt;/li&gt;\n  &lt;li&gt;\n    &lt;a href=\"GBP.html\"&gt;GBP&lt;/a&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n</code></pre> <p>Additionally, Cloney generates three other files, namely <code>USD.html</code>, <code>EUR.html</code>, and <code>GBP.html</code>, each containing content specific to the respective currency:</p> USD.html<pre><code>&lt;!-- File: USD.html --&gt;\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Currency: USD&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Currency: USD&lt;/h1&gt;\n    &lt;p&gt;Symbol: $&lt;/p&gt;\n    &lt;p&gt;Description: United States Dollar&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"creators/dynamic-file-generation/#known-limitations-and-workarounds","title":"Known Limitations and Workarounds","text":"<p>While Cloney's dynamic file generation is a powerful feature, there are certain limitations and workarounds to consider when working with it.</p>"},{"location":"creators/dynamic-file-generation/#limitation-variable-scopes-in-dynamic-file-generation","title":"Limitation: Variable Scopes in Dynamic File Generation","text":"<p>When working with Cloney's dynamic file generation, one notable limitation is related to variable scopes. In the example provided, the challenge lies in accessing variables defined in the outer scope, which may not be directly accessible within the <code>currency-file-content</code> template. This is because the context within the template is limited to the data passed to it, and it may not grant direct access to variables defined outside the template.</p>"},{"location":"creators/dynamic-file-generation/#workaround-using-a-dictionary-to-pass-context","title":"Workaround: Using a Dictionary to Pass Context","text":"<p>To address the issue of variable scopes and ensure that the <code>currency-file-content</code> template can access all the necessary variables, a workaround involves using a dictionary. This dictionary is used to encapsulate the required variables, both from the outer scope and the local context, and pass them as a single context to the <code>toFile</code> function.</p> <p>Here's how to implement this workaround:</p> home.html<pre><code>{{- $dict := dict \"outer\" $ \"local\" . -}}\n{{- toFile $fileName \"currency-file-content\" $dict -}}\n</code></pre> <p>In this code, a dictionary named <code>$dict</code> is created to hold two key-value pairs: <code>\"outer\"</code> and <code>\"local\"</code>. <code>\"outer\"</code> is assigned the value of the outer scope context (<code>$</code>), while <code>\"local\"</code> is assigned the value of the current currency data (<code>.</code>).</p>"},{"location":"creators/dynamic-file-generation/#accessing-variables-in-the-template","title":"Accessing Variables in the Template","text":"<p>After implementing the workaround of using a dictionary to encapsulate both outer scope and local variables, you can access these variables within the <code>currency-file-content</code> template as follows:</p> home.html<pre><code>{{- define \"currency-file-content\" -}}\n&lt;p&gt;The app name is: {{ .outer.app_name }}&lt;/p&gt;\n&lt;p&gt;The currency name is: {{ .local.name }}&lt;/p&gt;\n{{- end -}}\n</code></pre> <p><code>{{ .outer.app_name }}</code> accesses the <code>app_name</code> variable from the outer scope, which might not have been directly accessible within the template. The <code>.outer</code> context represents the outer scope context, and you can access any variable defined outside the template block.</p> <p><code>{{ .local.name }}</code> accesses the <code>name</code> variable from the local context, which contains data specific to the current currency being processed. The <code>.local</code> context provides access to all variables passed as local context data, ensuring you can work seamlessly with variables specific to the current block.</p> <p>By adopting this approach, you can effectively address variable scope challenges and ensure that the <code>currency-file-content</code> template has access to all the variables it needs to generate dynamic files accurately. This method allows for flexibility in working with variables, both from the outer scope and the local context, within your dynamically generated templates.</p>"},{"location":"creators/go-template-tutorials/","title":"Go Template Tutorials","text":"<p>To help you make the most of Cloney's dynamic variables and the Go template syntax, we recommend exploring tutorials and documentation on Go templates. Go templates is a widely used tool for generating text and are well-documented within the Go programming language. You can find these resources at:</p> <ul> <li> <p>Official Go Documentation</p> <p>Explore the official Go documentation for the <code>text/template</code> package, which provides an in-depth look at Go templates. This comprehensive resource will help you understand the intricacies of template creation and customization.</p> <p> Go Template Package Documentation</p> </li> <li> <p>Go Text Templates</p> <p>Check out the official Go documentation dedicated to text templates. It offers comprehensive insights into working with Go templates, including advanced topics and best practices.</p> <p> Go Text Templates</p> </li> <li> <p>Sprig Functions</p> <p>Cloney leverages the Sprig library, which extends Go templates with a variety of useful functions. Familiarize yourself with these functions to enhance the capabilities of your Cloney templates and streamline your projects.</p> <p> Explore Sprig Functions</p> </li> <li> <p>Helm Template Functions</p> <p>Helm is a widely-used package manager for Kubernetes, utilizing Go templates and introducing custom functions. Cloney integrates with Helm's <code>include</code> function, enabling its use within your templates.</p> <p> Explore Helm's Include Function</p> </li> </ul>"},{"location":"creators/functions/","title":"Introduction to Cloney Template Functions","text":"<p>Cloney Template Functions are custom functions provided by Cloney to enhance your template customization capabilities. These functions allow you to perform dynamic operations and generate content tailored to your specific needs within your Cloney templates.</p>"},{"location":"creators/functions/#what-are-cloney-template-functions","title":"What Are Cloney Template Functions?","text":"<p>Cloney Template Functions are predefined functions that you can use directly within your Cloney templates. These functions are designed to simplify common tasks and provide you with powerful tools for generating content, making decisions, and handling data.</p>"},{"location":"creators/functions/#how-to-use-cloney-template-functions","title":"How to Use Cloney Template Functions","text":"<p>To use Cloney Template Functions in your templates, you can call them directly within your template code. Each function has a specific purpose and may or may not require parameters. You can incorporate these functions into your templates to create dynamic and context-aware content.</p>"},{"location":"creators/functions/#available-cloney-template-functions","title":"Available Cloney Template Functions","text":"<p>Here is a list of some of the Cloney Template Functions available for your use:</p> <ul> <li><code>os</code>: Returns the user's operating system.</li> <li><code>arch</code>: Returns the user's operating system architecture.</li> </ul> <p>Explore each function's documentation to understand its purpose and how to use it effectively in your templates.</p>"},{"location":"creators/functions/arch/","title":"<code>arch</code> Function","text":"<p>The <code>arch</code> function provided by Cloney returns the user's operating system architecture.</p>"},{"location":"creators/functions/arch/#description","title":"Description","text":"<p>This function has no parameters and is useful for generating architecture-specific content in your Cloney templates.</p>"},{"location":"creators/functions/arch/#return-value","title":"Return Value","text":"<p>The <code>arch</code> function returns a string representing the user's operating system architecture.</p>"},{"location":"creators/functions/arch/#example","title":"Example","text":"<p>Here's an example of how to use the <code>arch</code> function in a Cloney template:</p> README.md<pre><code>To start the 'abc' service, run the following command:\n\n{{ if eq (arch) \"amd64\" }}\n    ./abc_amd64\n{{ else if eq (arch) \"arm64\" }}\n    ./abc_arm64\n{{ else }}\n    ./abc\n{{ end }}\n</code></pre> <p>This will generate content like:</p> README.md<pre><code>To start the 'abc' service, run the following command:\n\n./abc_amd64\n</code></pre> <p>Compatibility</p> <p>This function is available in Cloney 0.1.0 and later.</p>"},{"location":"creators/functions/os/","title":"<code>os</code> Function","text":"<p>The <code>os</code> function provided by Cloney returns the user's operating system.</p>"},{"location":"creators/functions/os/#description","title":"Description","text":"<p>This function has no parameters and is useful for generating OS-specific content in your Cloney templates.</p>"},{"location":"creators/functions/os/#return-value","title":"Return Value","text":"<p>The <code>os</code> function returns a string representing the user's operating system.</p>"},{"location":"creators/functions/os/#example","title":"Example","text":"<p>Here's an example of how to use the <code>os</code> function in a Cloney template:</p> README.md<pre><code>To start the 'abc' service, run the following command:\n\n{{ if eq (os) \"windows\" }}\n    ./abc.exe\n{{ else }}\n    ./abc\n{{ end }}\n</code></pre> <p>This will generate content like:</p> README.md<pre><code>To start the 'abc' service, run the following command:\n\n./abc.exe\n</code></pre> <p>Compatibility</p> <p>This function is available in Cloney 0.1.0 and later.</p>"},{"location":"partials/commands/clone/_clone-0.1.0-above/","title":"clone 0.1.0 above","text":"<p>Clone a template repository using the <code>clone</code> command. This command allows you to clone a Cloney Template Repository while providing the option to customize it with specific variable values.</p> <p>By default, this command searches for a file named <code>.cloney-vars.yaml</code> in your current directory for variable values. However, with the <code>--variables</code> flag you can specify a different file or pass the variables inline as YAML.</p>"},{"location":"partials/commands/clone/_clone-0.1.0-above/#flags","title":"Flags","text":"Flag Description Default Value <code>-b, --branch string</code> Specifies the Git branch. <code>\"main\"</code> <code>-o, --output string</code> Specifies the path to clone the repository to. <code>-t, --tag string</code> Specifies the Git tag. <code>-k, --token string</code> Specifies the Git token, if referencing a private Git repository. <code>-v, --variables string</code> Specifies the path to a template variables file or raw YAML. <code>\".cloney-vars.yaml\"</code>"},{"location":"partials/commands/clone/_clone-0.1.0-above/#example-1-basic-cloning","title":"Example 1: Basic Cloning","text":"<p>Clone a template repository without specifying a variables file:</p> <pre><code>cloney clone https://github.com/username/repository.git\n</code></pre>"},{"location":"partials/commands/clone/_clone-0.1.0-above/#example-2-using-a-custom-variables-file","title":"Example 2: Using a Custom Variables File","text":"<p>Clone a template repository and specify a different variables file (e.g., <code>variables.yaml</code>):</p> <pre><code>cloney clone https://github.com/username/repository.git -v variables.yaml\n</code></pre>"},{"location":"partials/commands/clone/_clone-0.1.0-above/#example-3-inline-variables","title":"Example 3: Inline Variables","text":"<p>Clone a template repository with inline variable values:</p> <pre><code>cloney clone https://github.com/username/repository.git -v '{ var1: value, var2: value }'\n</code></pre>"},{"location":"partials/commands/docs/_docs-0.2.0-above/","title":"docs 0.2.0 above","text":"<p>The <code>docs</code> command opens the Cloney documentation in your browser.</p>"},{"location":"partials/commands/docs/_docs-0.2.0-above/#example-1-basic-documentation-open","title":"Example 1: Basic Documentation Open","text":"<p>Open the Cloney documentation in your browser:</p> <pre><code>cloney docs\n</code></pre>"},{"location":"partials/commands/dry-run/_dry-run-0.1.0-above/","title":"dry run 0.1.0 above","text":"<p>The <code>dry-run</code> command is used for debugging purposes, allowing you to inspect the output generated by your Cloney Template Repository with the provided variables. This command helps you verify variable replacement and check for errors in the cloning process.</p> <p>By default, this command searches for a file named <code>.cloney-vars.yaml</code> in your current directory for variable values. However, with the <code>--variables</code> flag you can specify a different file or pass the variables inline as YAML.</p>"},{"location":"partials/commands/dry-run/_dry-run-0.1.0-above/#flags","title":"Flags","text":"Flag Description Default Value <code>-o, --output string</code> Specifies the path to output the filled template files. <code>\"cloney-dry-run-results\"</code> <code>-i, --output-in-terminal</code> Outputs the filled template file contents in the terminal instead of creating the files. <code>false</code> <code>-v, --variables string</code> Specifies the path to a template variables file or raw YAML. <code>\".cloney-vars.yaml\"</code>"},{"location":"partials/commands/dry-run/_dry-run-0.1.0-above/#example-1-using-default-variables-file","title":"Example 1: Using Default Variables File","text":"<p>Run a dry-run on your local template repository using the default variables file, <code>.cloney-vars.yaml</code>:</p> <pre><code>cloney dry-run\n</code></pre>"},{"location":"partials/commands/dry-run/_dry-run-0.1.0-above/#example-2-using-a-custom-variables-file","title":"Example 2: Using a Custom Variables File","text":"<p>Specify a different variables file (e.g., <code>variables.yaml</code>) for the dry-run:</p> <pre><code>cloney dry-run -v variables.yaml\n</code></pre>"},{"location":"partials/commands/dry-run/_dry-run-0.1.0-above/#example-3-inline-variables","title":"Example 3: Inline Variables","text":"<p>Run a dry-run with inline variable values:</p> <pre><code>cloney dry-run -v '{ var1: value, var2: value }'\n</code></pre>"},{"location":"partials/commands/dry-run/_dry-run-0.1.0-above/#example-4-dry-run-from-local-path","title":"Example 4: Dry-run from Local Path","text":"<p>Run a dry-run on a template repository from a local path:</p> <pre><code>cloney dry-run ./path/to/my/template -v variables.yaml\n</code></pre>"},{"location":"partials/commands/info/_info-0.1.0-above/","title":"info 0.1.0 above","text":"<p>Get information about a Cloney template repository using the <code>info</code> command. This command provides details about a Cloney template repository, including its name, description, and variables.</p> <p>The <code>info</code> command can retrieve information from both local and remote template repositories. By default, it retrieves information from the current directory, assuming it is a template repository.</p>"},{"location":"partials/commands/info/_info-0.1.0-above/#flags","title":"Flags","text":"Flag Description Default Value <code>-b, --branch string</code> Specifies the Git branch when referencing a git repository. <code>\"main\"</code> <code>-t, --tag string</code> Specifies the Git tag when referencing a git repository. <code>-k, --token string</code> Specifies the Git token when referencing a private git repository."},{"location":"partials/commands/info/_info-0.1.0-above/#example-1-basic-info-retrieval","title":"Example 1: Basic Info Retrieval","text":"<p>Retrieve information about the current template repository (assuming it is a template repository):</p> <pre><code>cloney info\n</code></pre>"},{"location":"partials/commands/info/_info-0.1.0-above/#example-2-info-from-local-path","title":"Example 2: Info from Local Path","text":"<p>Retrieve information about a template repository from a local path:</p> <pre><code>cloney info ./path/to/my/template\n</code></pre>"},{"location":"partials/commands/info/_info-0.1.0-above/#example-3-info-from-remote-repository-url","title":"Example 3: Info from Remote Repository URL","text":"<p>Retrieve information about a template repository from a remote repository URL:</p> <pre><code>cloney info https://github.com/username/repository.git\n</code></pre>"},{"location":"partials/commands/start/_start-0.1.0-above/","title":"start 0.1.0 above","text":"<p>Start a new Cloney template repository using the <code>start</code> command. This command creates a directory with all the necessary files to begin a new Cloney template repository.</p>"},{"location":"partials/commands/start/_start-0.1.0-above/#flags","title":"Flags","text":"Flag Description Default Value <code>-a, --authors stringArray</code> Specifies the authors of the template repository. <code>[]</code> <code>-d, --description string</code> Specifies the description of the template repository. <code>\"A Cloney template repository\"</code> <code>-l, --license string</code> Specifies the license of the template repository. <code>\"MIT\"</code> <code>-n, --name string</code> Specifies the name of the template repository. <code>\"cloney-template\"</code> <code>-y, --non-interactive</code> Skip questions and use default values and/or flags. <code>false</code> <code>-o, --output string</code> Specifies the directory where the template repository will be saved. <code>\"cloney-template\"</code>"},{"location":"partials/commands/start/_start-0.1.0-above/#example-1-basic-template-creation","title":"Example 1: Basic Template Creation","text":"<p>Start a new template repository with interactive prompts:</p> <pre><code>cloney start\n</code></pre>"},{"location":"partials/commands/start/_start-0.1.0-above/#example-2-non-interactive-mode","title":"Example 2: Non-Interactive Mode","text":"<p>Start a new template repository with default values and skip prompts:</p> <pre><code>cloney start -y\n</code></pre>"},{"location":"partials/commands/validate/_validate-0.1.0-above/","title":"validate 0.1.0 above","text":"<p>Validate your Cloney template repository using the <code>validate</code> command. This command checks whether your Cloney template repository is valid by verifying the presence of the <code>.cloney.yaml</code> metadata file and checking if it is valid.</p>"},{"location":"partials/commands/validate/_validate-0.1.0-above/#example-1-basic-validation","title":"Example 1: Basic Validation","text":"<p>Validate the current template repository (assuming it is a template repository):</p> <pre><code>cloney validate\n</code></pre>"},{"location":"partials/commands/validate/_validate-0.1.0-above/#example-2-validation-from-local-path","title":"Example 2: Validation from Local Path","text":"<p>Validate a template repository from a local path:</p> <pre><code>cloney validate ./path/to/my/template\n</code></pre>"},{"location":"partials/commands/version/_version-0.1.0-above/","title":"version 0.1.0 above","text":"<p>The <code>version</code> command in Cloney allows you to check the current version of the Cloney CLI tool.</p>"},{"location":"partials/commands/version/_version-0.1.0-above/#example-1-basic-version-check","title":"Example 1: Basic Version Check","text":"<p>Check the current version of Cloney:</p> <pre><code>cloney version\n</code></pre>"},{"location":"partials/downloads/_0.1.0/","title":"0.1.0","text":"Operating System Architecture Download Link Windows amd64 Download 0.1.0 arm64 Download 0.1.0 Linux amd64 Download 0.1.0 arm64 Download 0.1.0 macOS amd64 Download 0.1.0 arm64 Download 0.1.0 <p>Compatibility</p> <p>This version of Cloney is compatible with the following <code>.cloney.yaml</code> manifest versions: <code>v1</code>.</p>"},{"location":"partials/downloads/_0.2.0/","title":"0.2.0","text":"Operating System Architecture Download Link Windows amd64 Download Latest (0.2.0) arm64 Download Latest (0.2.0) Linux amd64 Download Latest (0.2.0) arm64 Download Latest (0.2.0) macOS amd64 Download Latest (0.2.0) arm64 Download Latest (0.2.0) <p>Compatibility</p> <p>This version of Cloney is compatible with the following <code>.cloney.yaml</code> manifest versions: <code>v1</code>.</p>"},{"location":"partials/manifests/_v1/","title":"v1","text":".cloney.yaml<pre><code>manifest_version: v1\n\nname: Bank Site\ndescription: A template to create a site for a bank.\nauthors:\n  - Chico Buarque\n  - Freddie Mercury\n  - John Lennon\nlicense: MIT\ntemplate_version: \"1.1.0\"\n\nconfiguration:\n  ignore_paths:\n    - development/*.html\n    - images/*.jpg\n\nvariables:\n  - name: app_name\n    description: The name of your application.\n    default: my_app\n    example: my_app\n\n  - name: enable_https\n    description: Wheter to enable HTTPS or not.\n    example: true\n\n  - name: currencies\n    description: List of currencies to use.\n    example:\n      - Real\n      - US Dollar\n      - Yen\n</code></pre> <p>manifest_version: The version of the Cloney manifest file used in the template, ensuring compatibility with different versions of Cloney.</p> <p>name: The name of your template, providing a clear identifier for users.</p> <p>description: A brief but informative description of your template's purpose and functionality.</p> <p>authors: A list of contributors or creators of the template, acknowledging their role in its development.</p> <p>license: The licensing information for your template, specifying how others can use and distribute it.</p> <p>template_version: The version number of your template, allowing users to identify different releases.</p> <p>configuration: A section that allows you to configure some optional aspects of your template.</p> <p>variables: A list of variables that users can customize during the cloning process.</p>"},{"location":"partials/manifests/_v1/#template-configuration","title":"Template Configuration","text":"<p>The <code>.cloney.yaml</code> metadata file also allows you to configure some aspects of your template. These configurations are optional and can be omitted if you don't require them.</p> <p>Ignore Paths: This configuration allows you to specify a list of paths to ignore when cloning the template. This is useful for excluding files that are not relevant to the template's customization process.</p>"},{"location":"partials/manifests/_v1/#template-variables","title":"Template Variables","text":"<p>Within the <code>.cloney.yaml</code> metadata file, Cloney allows you to define variables that users can customize during the cloning process. These variables play a central role in enabling dynamic template creation, ensuring that users can tailor templates to their specific requirements.</p> <p>Name: Assign a unique identifier to each variable, making it easy for users to reference and customize.</p> <p>Description: Provide a clear and concise description of each variable's purpose. These descriptions guide users in understanding how each variable affects the template.</p> <p>Default (Optional): Specify a default value for each variable. This value is used when a user doesn't provide a custom value during the cloning process. If this field is omitted, Cloney assumes that the variable is mandatory and must be informed by the user.</p> <p>Example Value: Every variable must include an example value that demonstrates how it should be formatted and used. This example serves as a practical reference for users, helping them correctly configure variables within their customized templates.</p> <p>Validate (Optional): This parameter determines whether the variable's value should undergo validation when it is cloned. By default, this setting is enabled (<code>true</code>). Although not recommended, you have the option to disable validation by setting this field to <code>false</code>. Disabling validation can be particularly beneficial for variables with dynamic characteristics, such as variables that may assume various types or maps with dynamically changing keys.</p>"},{"location":"users/","title":"User's Path","text":"<p>If you're looking to use existing Cloney Template Repositories created by others, you're in the right place. Cloney simplifies the process of leveraging templates tailored to various use cases and customizing them to meet your specific project requirements. Explore the following section to get started:</p> <ul> <li> <p>Cloning Your First Template Repository</p> <p>Learn how to clone your first Cloney template repository and customize it to suit your project requirements.</p> <p> Cloning Your First Template Repository</p> </li> <li> <p>Authentication and Private Repositories</p> <p>Discover how to work with private Git using Cloney.</p> <p> Authentication and Private Repositories</p> </li> <li> <p>Modularizing Repositories</p> <p>Discover how to modularize your Git repositories with Cloney, enabling you to combine multiple template repositories into a single, well-structured directory.</p> <p> Modularizing Repositories</p> </li> </ul>"},{"location":"users/authentication-and-private-repositories/","title":"Authentication and Private Repositories","text":"<p>When working with private Git repositories in Cloney, you have three available authentication methods. Each method is suitable for different use cases and security levels.</p> No Explicit Token (Recommended) Token Flag (Not Recommended) Environment Variables"},{"location":"users/authentication-and-private-repositories/#cloning-the-private-repository-and-using-cloney-dry-run","title":"Cloning the Private Repository and Using <code>cloney dry-run</code>","text":"<p>The recommended and more secure approach is to clone the private repository manually using Git and then use the <code>dry-run</code> command to apply Cloney's customizations without the need for explicit token authentication. This method is the recommended and secure way to work with private Git repositories in Cloney, as it leverages your existing access to the repository through Git.</p> <ol> <li> <p>Clone the private repository using Git:</p> <pre><code># Assuming you have access to the private repository.\ngit clone https://github.com/username/private-repository.git\n</code></pre> </li> <li> <p>Run the <code>cloney dry-run</code> command to apply Cloney's customizations:</p> <pre><code>cloney dry-run ./private-repository --output results\n</code></pre> <p>This command will apply Cloney's customizations to the <code>private-repository</code> directory and output the results to the <code>results</code> directory.</p> </li> </ol>"},{"location":"users/authentication-and-private-repositories/#using-the-k-token-flag","title":"Using the <code>-k, --token</code> Flag","text":"<p>Although not recommended, you can pass your Git token directly to Cloney using the <code>-k</code> or <code>--token</code> flag when running Cloney commands. Here's how to use it:</p> <pre><code># Clone command.\ncloney clone https://github.com/username/private-repo.git --token your-git-token\n\n# Info command.\ncloney info https://github.com/username/private-repo.git --token your-git-token\n</code></pre> <p>Replace <code>your-git-token</code> with your actual Git token. This method is suitable for one-time authentication within a single command.</p>"},{"location":"users/authentication-and-private-repositories/#using-the-cloney_git_token-environment-variable-linux-and-macos-only","title":"Using the <code>CLONEY_GIT_TOKEN</code> Environment Variable (Linux and macOS Only)","text":"<p>For Linux and macOS systems, you can set the <code>CLONEY_GIT_TOKEN</code> environment variable to specify your Git token once and use it across multiple Cloney commands without having to provide it every time.</p> <pre><code>export CLONEY_GIT_TOKEN=your-git-token\n</code></pre> <p>After setting the environment variable, you can run Cloney commands without the need to pass the token explicitly.</p>"},{"location":"users/cloning-your-first-template-repository/","title":"Cloning Your First Template Repository","text":"<p>Cloney makes it easy to get started with template repositories and customize them to suit your needs. Let's walk through the process of cloning your first Cloney template repository.</p>"},{"location":"users/cloning-your-first-template-repository/#step-1-choose-a-cloney-template-repository","title":"Step 1: Choose a Cloney Template Repository","text":"<p>Start by selecting a Cloney template repository that matches your project requirements. You can find Cloney template repositories on platforms like GitHub, GitLab, or Bitbucket.</p>"},{"location":"users/cloning-your-first-template-repository/#step-2-create-a-yaml-variables-file","title":"Step 2: Create a YAML Variables File","text":"<p>If the Cloney template repository you've chosen includes variables that you'd like to customize, you can create a YAML variables file. This file allows you to define custom values for variables specified in the template repository's <code>.cloney.yaml</code> metadata file. Here's an example:</p> .cloney-vars.yaml<pre><code>app_name: My App\nenable_https: true\ncurrencies:\n  - Real\n  - US Dollar\n  - Yen\n</code></pre> <p>In this example, we've customized variables like <code>app_name</code>, <code>enable_https</code>, and <code>currencies</code> to match our project's requirements.</p>"},{"location":"users/cloning-your-first-template-repository/#step-3-clone-the-template-repository","title":"Step 3: Clone the Template Repository","text":"<p>Use the Cloney Command-Line Interface (CLI) to clone the template repository and, if needed, apply your custom variables. Here's how to do it:</p> <pre><code>cloney clone https://github.com/username/repository.git --variables your-variables-file.yaml\n</code></pre> <ul> <li>Replace <code>https://github.com/username/repository.git</code> with the URL of the Cloney template repository you want to clone.</li> <li>Use <code>--variables your-variables-file.yaml</code> to specify the path to your YAML variables file if you've created one.</li> </ul> <p>By running this command, Cloney will clone the template repository and, if provided, apply the custom values from your YAML variables file. This ensures that your generated project reflects your specific configurations and requirements.</p>"},{"location":"users/modularizing-repositories/","title":"Cloney's Modularization: Building Your Project Block by Block","text":"<p>Cloney offers a practical approach to modularizing your Git repositories, enabling you to create well-structured projects by joining multiple template repositories into a single, organized directory, just like LEGO blocks! This approach promotes efficient template reuse and effective project management. In this documentation, we'll explore how Cloney's modularization capabilities can simplify your workflow.</p>"},{"location":"users/modularizing-repositories/#the-modularization-workflow","title":"The Modularization Workflow","text":"<p>To modularize a project with Cloney, follow these straightforward steps:</p>"},{"location":"users/modularizing-repositories/#1-create-a-project-directory","title":"1. Create a Project Directory","text":"<p>Begin by creating the root directory for your project. This directory will serve as the location for all the modules you intend to include.</p> <pre><code>mkdir my-project\ncd my-project\n</code></pre>"},{"location":"users/modularizing-repositories/#2-clone-template-repositories","title":"2. Clone Template Repositories","text":"<p>Utilize the <code>clone</code> command to clone template repositories into your project directory. For instance, let's say you need both a backend and a frontend for your project:</p> <pre><code># Clone a Java REST API template repository into the 'api' directory.\ncloney clone https://github.com/username/java-rest-api -v api-vars.yaml -o api\n\n# Clone a React frontend template repository into the 'frontend' directory.\ncloney clone https://gitlab.com/username/react-boilerplate -v front-vars.yaml -o frontend\n</code></pre> <p>In this example, we've cloned a Java REST API template repository into the <code>api</code> directory and a React frontend template repository into the <code>frontend</code> directory. These template repositories are just fictitious examples, but you can use any template repositories you'd like.</p> <p>When cloning repositories with Cloney, the hidden <code>.git</code> folder from the cloned template repositories is not included. This ensures that everything remains within a single repository, and you won't have multiple <code>.git</code> directories to manage.</p>"},{"location":"users/modularizing-repositories/#3-module-organization","title":"3. Module Organization","text":"<p>You now have a series of modules within your project directory, each representing a specific part of your project. Organize these modules according to your project's structure and requirements.</p> <pre><code>my-project/\n  \u251c\u2500\u2500 README.md (Project README)\n  \u251c\u2500\u2500 api/\n  \u2502   \u251c\u2500\u2500 ... (REST API files and directories)\n  \u251c\u2500\u2500 frontend/\n  \u2502   \u251c\u2500\u2500 ... (React frontend files and directories)\n  \u2514\u2500\u2500 ... (Additional modules as needed)\n</code></pre> <p>With Cloney's modularization, you can efficiently build your project by incorporating components from various template repositories, ensuring a well-organized and productive development process.</p>"}]}